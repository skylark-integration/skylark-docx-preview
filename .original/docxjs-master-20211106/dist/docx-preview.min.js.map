{"version":3,"sources":["webpack://docx/webpack/universalModuleDefinition","webpack://docx/webpack/bootstrap","webpack://docx/./src/common/part.ts","webpack://docx/./src/utils.ts","webpack://docx/./src/dom/common.ts","webpack://docx/./src/dom/dom.ts","webpack://docx/./src/common/relationship.ts","webpack://docx/./src/parser/xml-parser.ts","webpack://docx/./src/dom/paragraph.ts","webpack://docx/./src/dom/section.ts","webpack://docx/./src/dom/run.ts","webpack://docx/./src/docx-preview.ts","webpack://docx/./src/word-document.ts","webpack://docx/external \"JSZip\"","webpack://docx/./src/font-table/font-table.ts","webpack://docx/./src/font-table/fonts.ts","webpack://docx/./src/common/package.ts","webpack://docx/./src/dom/document-part.ts","webpack://docx/./src/numbering/numbering-part.ts","webpack://docx/./src/numbering/numbering.ts","webpack://docx/./src/dom/line-spacing.ts","webpack://docx/./src/styles/styles-part.ts","webpack://docx/./src/document-parser.ts","webpack://docx/./src/dom/bookmark.ts","webpack://docx/./src/html-renderer.ts","webpack://docx/./src/javascript.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__11__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","path","load","pkg","loadRelationships","this","then","rels","Part","appendClass","classList","className","element","si","lastIndexOf","substring","array","by","reduce","a","x","wordml","LengthUsage","Dxa","mul","unit","Emu","FontSize","Border","Percent","LineHeight","val","usage","parseInt","type","elem","props","xml","namespaceURI","localName","color","attr","fontSize","lengthAttr","DomType","RelationshipTypes","xmlParser","elements","map","e","id","target","targetMode","parse","xmlString","skipDeclaration","replace","DOMParser","parseFromString","firstChild","result","childNodes","length","item","nodeType","push","attributes","intAttr","node","attrName","defaultValue","floatAttr","parseFloat","boolAttr","convertLength","XmlParser","globalXmlParser","parseParagraphProperty","parseCommonProperty","tabs","parseTabs","sectionProps","parseSectionProperties","numbering","parseNumbering","lineSpacing","parseLineSpacing","textAlignment","keepLines","keepNext","pageBreakBefore","outlineLevel","styleName","runProps","parseRunProperties","position","leader","style","level","parseColumns","numberOfColumns","space","separator","equalWidth","columns","width","SectionType","section","pageSize","height","orientation","pageMargins","left","right","top","bottom","header","footer","gutter","parseRunProperty","data","bodyContainer","styleContainer","userOptions","parser","DocumentParser","renderer","HtmlRenderer","document","options","ignoreHeight","ignoreWidth","ignoreFonts","breakPages","debug","experimental","inWrapper","WordDocument","doc","render","parts","partsMap","blob","_parser","JSZip","loadAsync","zip","_package","Package","find","OfficeDocument","loadRelationshipPart","Promise","resolve","exists","part","documentPart","DocumentPart","FontTable","fontTablePart","FontTablePart","Numbering","numberingPart","NumberingPart","Styles","stylesPart","StylesPart","folder","splitPath","rel","all","loadDocumentImage","loadResource","URL","createObjectURL","loadNumberingImage","loadFont","Blob","deobfuscate","outputType","fodler","guidKey","trimmed","numbers","Array","substr","el","fonts","parseFonts","parseFont","family","altName","fontKey","refId","_zip","files","file","async","relsPath","parseRelationships","_documentParser","body","parseDocumentFile","assign","parseNumberingPart","domNumberings","parseNumberingFile","overrides","abstractId","parseNumberingLevelOverrride","parseAbstractNumbering","levels","multiLevelType","numberingStyleLink","styleLink","parseNumberingLevel","start","restart","format","text","justification","bulletPictureId","paragraphProps","parseParagraphProperties","numberingLevel","parseNumberingBulletPicture","pict","shape","imagedata","referenceId","numberings","abstractNumberings","bulletPictures","before","after","line","lineRule","styles","parseStylesFile","autos","shd","highlight","SizeType","Document","children","cssStyle","xbody","foreach","parseParagraph","parseTable","xstyles","parseStyle","parseDefaultStyles","basedOn","rPr","values","parseDefaultProperties","pPr","stringAttr","isDefault","linked","aliases","split","parseTableStyle","console","warn","selector","xnums","mapping","bullets","forEach","parseNumberingPicBullet","numId","abstractNumId","elementStringAttr","src","bullet","filter","levelText","Paragraph","parseRun","parseHyperlink","parseBookmarkStart","parseBookmarkEnd","paragraph","utils","addElementClass","classNameOfCnfStyle","parseFrame","parent","Hyperlink","anchor","href","Run","Text","textContent","fldCharType","Break","break","font","char","Tab","instrText","parseDrawing","run","wrapper","parseDrawingWrapper","Drawing","isAnchor","wrapType","simplePos","posX","relative","align","offset","posY","sizeAttr","pos","alignNode","offsetNode","sizeValue","g","parseGraphic","graphicData","parsePicture","Image","blipFill","blip","spPr","xfrm","Table","parseTableRow","parseTableColumns","parseTableProperties","table","cellStyle","classNameOftblLook","parseTablePosition","topFromText","bottomFromText","rightFromText","leftFromText","addSize","Row","parseTableCell","parseTableRowProperties","row","Cell","parseTableCellProperties","cell","span","childStyle","handler","valueOfJc","valueOfTextAlignment","colorAttr","valueOfSize","parseTrHeight","valueOfStrike","valueOfBold","parseUnderline","parseIndentation","parseBorderProperties","valueOfMargin","valueOfBorder","parseMarginProperties","valueOfTblLayout","parseSpacing","col","ascii","firstLine","end","toFixed","output","cb","nodeName","defValue","autoColor","v","convertSize","indexOf","intVal","trim","b","checkMask","num","mask","BookmarkStart","colFirst","colLast","BookmarkEnd","htmlDocument","removeAllElements","appendComment","appendChild","renderDefaultStyle","renderStyles","renderNumbering","renderFontTable","sectionElements","renderSections","renderWrapper","appentElements","fontsPart","f","fontData","cssTest","createStyleElement","processClassName","processStyles","stylesMap","baseStyle","baseValues","styleValues","copyStyleProperties","cssName","escapeClassName","processElement","processTable","input","attrs","getOwnPropertyNames","createSection","createElement","paddingLeft","renderLength","paddingRight","paddingTop","paddingBottom","minHeight","columnCount","columnGap","columnRule","splitBySection","sectionElement","sectProps","renderElements","current","styleMap","keyBy","pBreakIndex","rBreakIndex","findIndex","breakRun","splitRun","newParagraph","slice","runChildren","newRun","currentSectProps","listStyleType","styleText","rootCounters","numberingClass","counter","numberingCounter","styleToString","levelTextToContent","toLowerCase","numFormatToCssValue","join","subStyles","linkedStyle","concat","subStyle","renderElement","renderParagraph","renderBookmarkStart","renderRun","renderTable","renderTableRow","renderTableCell","renderHyperlink","renderDrawing","renderImage","renderText","renderTab","renderSymbol","renderChildren","into","elems","renderClass","renderStyleValues","renderCommonProeprties","styleClassName","renderRunProperties","display","textIndent","createTextNode","fontFamily","innerHTML","tabSpan","setTimeout","findParent","sort","updateTabStop","link","renderTableColumns","colElem","colSpan","ouput","lvl","selectors","cssText","container","removeChild","styleElement","comment","createComment","pixelToPoint","closest","tbb","getBoundingClientRect","pbb","tab","borderBottom"],"mappings":"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","file":"docx-preview.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"JSZip\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"JSZip\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"docx\"] = factory(require(\"JSZip\"));\n\telse\n\t\troot[\"docx\"] = factory(root[\"JSZip\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__11__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","import { Package } from \"./package\";\r\nimport { Relationship } from \"./relationship\";\r\n\r\nexport class Part {\r\n    rels: Relationship[];\r\n\r\n    constructor(public path: string) {\r\n    }\r\n\r\n    load(pkg: Package): Promise<any> {\r\n        return pkg.loadRelationships(this.path).then(rels => {\r\n            this.rels = rels;\r\n        })\r\n    }\r\n}","import { OpenXmlElement } from \"./dom/dom\";\r\n\r\nexport function addElementClass(element: OpenXmlElement, className: string): string {\r\n    return element.className = appendClass(element.className, className);\r\n}\r\n\r\nexport function appendClass(classList: string, className: string): string {\r\n    return (!classList) ? className : `${classList} ${className}`\r\n}\r\n\r\nexport function splitPath(path: string): [string, string] {\r\n    let si = path.lastIndexOf('/') + 1;\r\n    let folder = si == 0 ? \"\" : path.substring(0, si);\r\n    let fileName = si == 0 ? path : path.substring(si);\r\n\r\n    return [folder, fileName];\r\n}\r\n\r\nexport function keyBy<T = any>(array: T[], by: (x: T) => any): Record<any, T> {\r\n    return array.reduce((a, x) => {\r\n        a[by(x)] = x;\r\n        return a;\r\n    }, {});\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport const ns = {\r\n    wordml: \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"\r\n}\r\n\r\nexport type LengthType = \"px\" | \"pt\" | \"%\";\r\n\r\nexport interface Length {\r\n    value: number;\r\n    type: LengthType\r\n}\r\n\r\nexport interface Font {\r\n    name: string;\r\n    family: string;\r\n}\r\n\r\nexport interface CommonProperties {\r\n    fontSize: Length;\r\n    color: string;\r\n}\r\n\r\nexport type LengthUsageType = { mul: number, unit: LengthType };\r\n\r\nexport const LengthUsage: Record<string, LengthUsageType> = {\r\n    Dxa: { mul: 0.05, unit: \"pt\" }, //twips\r\n    Emu: { mul: 1 / 12700, unit: \"pt\" },\r\n    FontSize: { mul: 0.5, unit: \"pt\" },\r\n    Border: { mul: 0.125, unit: \"pt\" },\r\n    Percent: { mul: 0.02, unit: \"%\" },\r\n    LineHeight: { mul: 1 / 240, unit: null }\r\n}\r\n\r\nexport function convertLength(val: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n    return val ? { value: parseInt(val) * usage.mul, type: usage.unit } : null;\r\n}\r\n\r\nexport function parseCommonProperty(elem: Element, props: CommonProperties, xml: XmlParser): boolean {\r\n    if(elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    switch(elem.localName) {\r\n        case \"color\": \r\n            props.color = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"sz\":\r\n            props.fontSize = xml.lengthAttr(elem, \"val\", LengthUsage.FontSize);\r\n            break;\r\n\r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}","export enum DomType {\r\n    Document = \"document\",\r\n    Paragraph = \"paragraph\",\r\n    Run = \"run\",\r\n    Break = \"break\",\r\n    Table = \"table\",\r\n    Row = \"row\",\r\n    Cell = \"cell\",\r\n    Hyperlink = \"hyperlink\",\r\n    Drawing = \"drawing\",\r\n    Image = \"image\",\r\n    Text = \"text\",\r\n    Tab = \"tab\",\r\n    Symbol = \"symbol\",\r\n    BookmarkStart = \"bookmarkStart\",\r\n    BookmarkEnd = \"bookmarkEnd\"\r\n}\r\n\r\nexport interface OpenXmlElement {\r\n    type: DomType;\r\n    children?: OpenXmlElement[];\r\n    cssStyle?: Record<string, string>;\r\n    className?: string;\r\n    parent?: OpenXmlElement;\r\n}\r\n\r\nexport interface IDomHyperlink extends OpenXmlElement {\r\n    href?: string;\r\n}\r\n\r\n\r\nexport interface BreakElement extends OpenXmlElement{\r\n    break: \"page\" | \"lastRenderedPageBreak\" | \"textWrapping\";\r\n}\r\n\r\nexport interface TextElement extends OpenXmlElement{\r\n    text: string;\r\n}\r\n\r\nexport interface SymbolElement extends OpenXmlElement {\r\n    font: string;\r\n    char: string;\r\n}\r\n\r\nexport interface IDomTable extends OpenXmlElement {\r\n    columns?: IDomTableColumn[];\r\n    cellStyle?: Record<string, string>;\r\n}\r\n\r\nexport interface IDomTableRow extends OpenXmlElement {\r\n}\r\n\r\nexport interface IDomTableCell extends OpenXmlElement {\r\n    span?: number;\r\n}\r\n\r\nexport interface IDomImage extends OpenXmlElement {\r\n    src: string;\r\n}\r\n\r\nexport interface IDomTableColumn {\r\n    width?: string;\r\n}\r\n\r\nexport interface IDomNumbering {\r\n    id: string;\r\n    level: number;\r\n    style: Record<string, string>;\r\n    levelText?: string;\r\n    format?: string;\r\n    bullet?: NumberingPicBullet;\r\n}\r\n\r\nexport interface NumberingPicBullet {\r\n    id: number;\r\n    src: string;\r\n    style?: string;\r\n}\r\n","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface Relationship {\r\n    id: string,\r\n    type: RelationshipTypes | string,\r\n    target: string\r\n    targetMode: \"\" | string \r\n}\r\n\r\nexport enum RelationshipTypes {\r\n    OfficeDocument = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\r\n    FontTable = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\",\r\n    Image = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\",\r\n    Numbering = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering\",\r\n    Styles = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\",\r\n    StylesWithEffects = \"http://schemas.microsoft.com/office/2007/relationships/stylesWithEffects\",\r\n    Theme = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\",\r\n    Settings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\",\r\n    WebSettings = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\",\r\n    Hyperlink = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\"\r\n}\r\n\r\nexport function parseRelationships(root: Element, xmlParser: XmlParser): Relationship[] {\r\n    return xmlParser.elements(root).map(e => <Relationship>{\r\n        id: xmlParser.attr(e, \"Id\"),\r\n        type: xmlParser.attr(e, \"Type\"),\r\n        target: xmlParser.attr(e, \"Target\"),\r\n        targetMode: xmlParser.attr(e, \"TargetMode\")\r\n    });\r\n}","import { Length,  LengthUsage, LengthUsageType, convertLength  } from \"../dom/common\";\r\n\r\nexport class XmlParser {\r\n    parse(xmlString: string, skipDeclaration: boolean = true): Element {\r\n        if (skipDeclaration)\r\n            xmlString = xmlString.replace(/<[?].*[?]>/, \"\");\r\n\r\n        return <Element>new DOMParser().parseFromString(xmlString, \"application/xml\").firstChild;\r\n    }\r\n\r\n    elements(elem: Element, localName: string = null): Element[] {\r\n        const result = [];\r\n\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (localName == null || (c as Element).localName == localName))\r\n                result.push(c);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    element(elem: Element, localName: string): Element {\r\n        for (let i = 0, l = elem.childNodes.length; i < l; i++) {\r\n            let c = elem.childNodes.item(i);\r\n\r\n            if (c.nodeType == 1 && (c as Element).localName == localName)\r\n                return c as Element;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    attr(elem: Element, localName: string): string {\r\n        for (let i = 0, l = elem.attributes.length; i < l; i++) {\r\n            let a = elem.attributes.item(i);\r\n\r\n            if (a.localName == localName)\r\n                return a.value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    intAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseInt(val) : defaultValue;\r\n    }\r\n\r\n    floatAttr(node: Element, attrName: string, defaultValue: number = null): number {\r\n        var val = this.attr(node, attrName);\r\n        return val ? parseFloat(val) : defaultValue;\r\n    }\r\n\r\n    boolAttr(node: Element, attrName: string, defaultValue: boolean = null) {\r\n        var v = this.attr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"1\": return true;\r\n            case \"0\": return false;\r\n            default: return defaultValue;\r\n        }\r\n    }\r\n\r\n    lengthAttr(node: Element, attrName: string, usage: LengthUsageType = LengthUsage.Dxa): Length {\r\n        return convertLength(this.attr(node, attrName), usage);\r\n    }\r\n}\r\n\r\nconst globalXmlParser = new XmlParser();\r\n\r\nexport default globalXmlParser;","import { OpenXmlElement } from \"./dom\";\r\nimport { CommonProperties, Length, ns, parseCommonProperty } from \"./common\";\r\nimport { Borders } from \"./border\";\r\nimport { parseSectionProperties, SectionProperties } from \"./section\";\r\nimport { LineSpacing, parseLineSpacing } from \"./line-spacing\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { parseRunProperties, RunProperties } from \"./run\";\r\n\r\nexport interface ParagraphElement extends OpenXmlElement, ParagraphProperties {\r\n}\r\n\r\nexport interface ParagraphProperties extends CommonProperties {\r\n    sectionProps: SectionProperties;\r\n    tabs: ParagraphTab[];\r\n    numbering: ParagraphNumbering;\r\n\r\n    border: Borders;\r\n    textAlignment: \"auto\" | \"baseline\" | \"bottom\" | \"center\" | \"top\" | string;\r\n    lineSpacing: LineSpacing;\r\n    keepLines: boolean;\r\n    keepNext: boolean;\r\n    pageBreakBefore: boolean;\r\n    outlineLevel: number;\r\n    styleName: string;\r\n\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface ParagraphTab {\r\n    style: \"bar\" | \"center\" | \"clear\" | \"decimal\" | \"end\" | \"num\" | \"start\" | \"left\" | \"right\";\r\n    leader: \"none\" | \"dot\" | \"heavy\" | \"hyphen\" | \"middleDot\" | \"underscore\";\r\n    position: Length;\r\n}\r\n\r\nexport interface ParagraphNumbering {\r\n    id: string;\r\n    level: number;\r\n}\r\n\r\nexport function parseParagraphProperties(elem: Element, xml: XmlParser): ParagraphProperties {\r\n    let result = <ParagraphProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseParagraphProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseParagraphProperty(elem: Element, props: ParagraphProperties, xml: XmlParser) {\r\n    if (elem.namespaceURI != ns.wordml)\r\n        return false;\r\n\r\n    if(parseCommonProperty(elem, props, xml))\r\n        return true;\r\n\r\n    switch (elem.localName) {\r\n        case \"tabs\":\r\n            props.tabs = parseTabs(elem, xml);\r\n            break;\r\n\r\n        case \"sectPr\":\r\n            props.sectionProps = parseSectionProperties(elem, xml);\r\n            break;\r\n\r\n        case \"numPr\":\r\n            props.numbering = parseNumbering(elem, xml);\r\n            break;\r\n        \r\n        case \"spacing\":\r\n            props.lineSpacing = parseLineSpacing(elem, xml);\r\n            return false; // TODO\r\n            break;\r\n\r\n        case \"textAlignment\":\r\n            props.textAlignment = xml.attr(elem, \"val\");\r\n            return false; //TODO\r\n            break;\r\n\r\n        case \"keepNext\":\r\n            props.keepLines = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n    \r\n        case \"keepNext\":\r\n            props.keepNext = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"pageBreakBefore\":\r\n            props.pageBreakBefore = xml.boolAttr(elem, \"val\", true);\r\n            break;\r\n        \r\n        case \"outlineLvl\":\r\n            props.outlineLevel = xml.intAttr(elem, \"val\");\r\n            break;\r\n\r\n        case \"pStyle\":\r\n            props.styleName = xml.attr(elem, \"val\");\r\n            break;\r\n\r\n        case \"rPr\":\r\n            props.runProps = parseRunProperties(elem, xml);\r\n            break;\r\n        \r\n        default:\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function parseTabs(elem: Element, xml: XmlParser): ParagraphTab[] {\r\n    return xml.elements(elem, \"tab\")\r\n        .map(e => <ParagraphTab>{\r\n            position: xml.lengthAttr(e, \"pos\"),\r\n            leader: xml.attr(e, \"leader\"),\r\n            style: xml.attr(e, \"val\")\r\n        });\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): ParagraphNumbering {\r\n    var result = <ParagraphNumbering>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"numId\":\r\n                result.id = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"ilvl\":\r\n                result.level = xml.intAttr(e, \"val\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface Column {\r\n    space: Length;\r\n    width: Length;\r\n}\r\n\r\nexport interface Columns {\r\n    space: Length;\r\n    numberOfColumns: number;\r\n    separator: boolean;\r\n    equalWidth: boolean;\r\n    columns: Column[];\r\n}\r\n\r\nexport interface PageSize {\r\n    width: Length, \r\n    height: Length, \r\n    orientation: \"landscape\" | string \r\n}\r\n\r\nexport interface PageMargins {\r\n    top: Length;\r\n    right: Length;\r\n    bottom: Length;\r\n    left: Length;\r\n    header: Length;\r\n    footer: Length;\r\n    gutter: Length;\r\n}\r\n\r\nexport enum SectionType {\r\n    Continuous = \"continuous\",\r\n    NextPage = \"nextPage\", \r\n    NextColumn = \"nextColumn\",\r\n    EvenPage = \"evenPage\",\r\n    OddPage = \"oddPage\",\r\n}\r\n\r\nexport interface SectionProperties {\r\n    type: SectionType | string;\r\n    pageSize: PageSize,\r\n    pageMargins: PageMargins,\r\n    columns: Columns;\r\n}\r\n\r\nexport function parseSectionProperties(elem: Element, xml: XmlParser): SectionProperties {\r\n    var section = <SectionProperties>{};\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"pgSz\":\r\n                section.pageSize = {\r\n                    width: xml.lengthAttr(e, \"w\"),\r\n                    height: xml.lengthAttr(e, \"h\"),\r\n                    orientation: xml.attr(e, \"orient\")\r\n                }\r\n                break;\r\n\r\n            case \"type\":\r\n                section.type = xml.attr(e, \"val\");\r\n                break;\r\n\r\n            case \"pgMar\":\r\n                section.pageMargins = {\r\n                    left: xml.lengthAttr(e, \"left\"),\r\n                    right: xml.lengthAttr(e, \"right\"),\r\n                    top: xml.lengthAttr(e, \"top\"),\r\n                    bottom: xml.lengthAttr(e, \"bottom\"),\r\n                    header: xml.lengthAttr(e, \"header\"),\r\n                    footer: xml.lengthAttr(e, \"footer\"),\r\n                    gutter: xml.lengthAttr(e, \"gutter\"),\r\n                };\r\n                break;\r\n\r\n            case \"cols\":\r\n                section.columns = parseColumns(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return section;\r\n}\r\n\r\nfunction parseColumns(elem: Element, xml: XmlParser): Columns {\r\n    return {\r\n        numberOfColumns: xml.intAttr(elem, \"num\"),\r\n        space: xml.lengthAttr(elem, \"space\"),\r\n        separator: xml.boolAttr(elem, \"sep\"),\r\n        equalWidth: xml.boolAttr(elem, \"equalWidth\", true),\r\n        columns: xml.elements(elem, \"col\")\r\n            .map(e => <Column>{\r\n                width: xml.lengthAttr(e, \"w\"),\r\n                space: xml.lengthAttr(e, \"space\")\r\n            })\r\n    };\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { CommonProperties, parseCommonProperty } from \"./common\";\r\nimport { OpenXmlElement } from \"./dom\";\r\n\r\nexport interface RunElement extends OpenXmlElement, RunProperties {\r\n    id?: string;\r\n    break?: string;\r\n    wrapper?: string;\r\n    href?: string;\r\n    fldCharType?: \"begin\" | \"end\" | \"separate\" | string;\r\n    instrText?: string;\r\n}\r\n\r\nexport interface RunProperties extends CommonProperties {\r\n\r\n}\r\n\r\nexport function parseRunProperties(elem: Element, xml: XmlParser): RunProperties {\r\n    let result = <RunProperties>{};\r\n\r\n    for(let el of xml.elements(elem)) {\r\n        parseRunProperty(el, result, xml);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseRunProperty(elem: Element, props: RunProperties, xml: XmlParser) {\r\n    if (parseCommonProperty(elem, props, xml))\r\n        return true;\r\n\r\n    return false;\r\n}","import { WordDocument } from './word-document';\r\nimport { DocumentParser } from './document-parser';\r\nimport { HtmlRenderer } from './html-renderer';\r\n\r\nexport interface Options {\r\n    inWrapper: boolean;\r\n    ignoreWidth: boolean;\r\n    ignoreHeight: boolean;\r\n    ignoreFonts: boolean;\r\n    breakPages: boolean;\r\n    debug: boolean;\r\n    experimental: boolean;\r\n    className: string;\r\n}\r\n\r\nexport function renderAsync(data: Blob | any, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, userOptions: Partial<Options> = null) {\r\n    var parser = new DocumentParser();\r\n    var renderer = new HtmlRenderer(window.document);\r\n\r\n    var options = { \r\n        ignoreHeight: false,\r\n        ignoreWidth: false,\r\n        ignoreFonts: false,\r\n        breakPages: true,\r\n        debug: false,\r\n        experimental: false,\r\n        className: \"docx\",\r\n        inWrapper: true,\r\n        ... userOptions\r\n    };\r\n\r\n    parser.ignoreWidth = options.ignoreWidth;\r\n    parser.debug = options.debug || parser.debug;\r\n\r\n    renderer.className = options.className || \"docx\";\r\n    renderer.inWrapper = options.inWrapper;\r\n\r\n    return WordDocument.load(data, parser).then(doc => {\r\n        renderer.render(doc, bodyContainer, styleContainer, options);\r\n        return doc;\r\n    })\r\n}","import * as JSZip from 'jszip';\r\n\r\nimport { DocumentParser } from './document-parser';\r\nimport { Relationship, RelationshipTypes } from './common/relationship';\r\nimport { Part } from './common/part';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { Package } from './common/package';\r\nimport { DocumentPart } from './dom/document-part';\r\nimport { splitPath } from './utils';\r\nimport { NumberingPart } from './numbering/numbering-part';\r\nimport { StylesPart } from './styles/styles-part';\r\n\r\nexport class WordDocument {\r\n    private _package: Package;\r\n    private _parser: DocumentParser;\r\n    \r\n    rels: Relationship[];\r\n    parts: Part[] = [];\r\n    partsMap: Record<string, Part> = {};\r\n\r\n    documentPart: DocumentPart;\r\n    fontTablePart: FontTablePart;\r\n    numberingPart: NumberingPart;\r\n    stylesPart: StylesPart;\r\n\r\n    static load(blob, parser: DocumentParser): Promise<WordDocument> {\r\n        var d = new WordDocument();\r\n\r\n        d._parser = parser;\r\n\r\n        return JSZip.loadAsync(blob)\r\n            .then(zip => {\r\n                d._package = new Package(zip);\r\n\r\n                return d._package.loadRelationships();\r\n            }).then(rels => {\r\n                d.rels = rels;\r\n\r\n                let { target, type } = rels.find(x => x.type == RelationshipTypes.OfficeDocument) ?? {\r\n                    target: \"word/document.xml\",\r\n                    type: RelationshipTypes.OfficeDocument\r\n                }; //fallback\r\n\r\n                return d.loadRelationshipPart(target, type).then(() => d);\r\n            });\r\n    }\r\n\r\n    private loadRelationshipPart(path: string, type: string): Promise<Part> {\r\n        if (this.partsMap[path])\r\n            return Promise.resolve(this.partsMap[path]);\r\n\r\n        if (!this._package.exists(path))\r\n            return Promise.resolve(null);\r\n\r\n        let part: Part = null;\r\n\r\n        switch(type) {\r\n            case RelationshipTypes.OfficeDocument:\r\n                this.documentPart = part = new DocumentPart(path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.FontTable:\r\n                this.fontTablePart = part = new FontTablePart(path);\r\n                break;\r\n\r\n            case RelationshipTypes.Numbering:\r\n                this.numberingPart = part = new NumberingPart(path, this._parser);\r\n                break;\r\n\r\n            case RelationshipTypes.Styles:\r\n                this.stylesPart = part = new StylesPart(path, this._parser);\r\n                break;\r\n        }\r\n\r\n        if (part == null)\r\n            return Promise.resolve(null);\r\n\r\n        this.partsMap[path] = part;\r\n        this.parts.push(part);\r\n\r\n        return part.load(this._package).then(() => {\r\n            if (part.rels == null || part.rels.length == 0)\r\n                return part;\r\n\r\n            let [folder] = splitPath(part.path);\r\n            let rels = part.rels.map(rel => {\r\n                return this.loadRelationshipPart(`${folder}${rel.target}`, rel.type)\r\n            });\r\n\r\n            return Promise.all(rels).then(() => part);\r\n        });\r\n    }\r\n\r\n    loadDocumentImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.documentPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadNumberingImage(id: string): PromiseLike<string> {\r\n        return this.loadResource(this.numberingPart, id, \"blob\")\r\n            .then(x => x ? URL.createObjectURL(x) : null);\r\n    }\r\n\r\n    loadFont(id: string, key: string): PromiseLike<string> {\r\n        return this.loadResource(this.fontTablePart, id, \"uint8array\")\r\n            .then(x => x ? URL.createObjectURL(new Blob([deobfuscate(x, key)])) : x);\r\n    }\r\n\r\n    private loadResource(part: Part, id: string, outputType: JSZip.OutputType) {\r\n        let rel = part.rels.find(x => x.id == id);\r\n\r\n        if (rel == null)\r\n            return Promise.resolve(null);\r\n\r\n        let [fodler] = splitPath(part.path);\r\n\r\n        return this._package.load(fodler + rel.target, outputType);\r\n    }\r\n}\r\n\r\nexport function deobfuscate(data: Uint8Array, guidKey: string): Uint8Array {\r\n    const len = 16;\r\n    const trimmed = guidKey.replace(/{|}|-/g, \"\");\r\n    const numbers = new Array(len);\r\n    \r\n    for(let i = 0; i < len; i ++)\r\n        numbers[len - i - 1] = parseInt(trimmed.substr(i * 2, 2), 16);\r\n\r\n    for (let i = 0; i < 32; i++)\r\n        data[i] = data[i] ^ numbers[i % len]\r\n\r\n    return data;\r\n}","module.exports = __WEBPACK_EXTERNAL_MODULE__11__;","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { FontDeclaration, parseFonts } from \"./fonts\";\r\n\r\nexport class FontTablePart extends Part {\r\n    fonts: FontDeclaration[];\r\n\r\n    load(pkg: Package): Promise<void> {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"xml\"))\r\n            .then((el) => {\r\n                    this.fonts = parseFonts(el, pkg.xmlParser);\r\n            });\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface FontDeclaration {\r\n    name: string,\r\n    altName: string,\r\n    family: string,\r\n    fontKey: string,\r\n    refId: string\r\n}\r\n\r\nexport function parseFonts(root: Element, xmlParser: XmlParser): FontDeclaration[] {\r\n    return xmlParser.elements(root).map(el => parseFont(el, xmlParser));\r\n}\r\n\r\nexport function parseFont(elem: Element, xmlParser: XmlParser): FontDeclaration {\r\n    let result = <FontDeclaration>{\r\n        name: xmlParser.attr(elem, \"name\")\r\n    };\r\n\r\n    for (let el of xmlParser.elements(elem)) {\r\n        switch (el.localName) {\r\n            case \"family\":\r\n                result.family = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"altName\":\r\n                result.altName = xmlParser.attr(el, \"val\");\r\n                break;\r\n\r\n            case \"embedRegular\":\r\n                result.fontKey = xmlParser.attr(el, \"fontKey\");\r\n                result.refId = xmlParser.attr(el, \"id\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}","import JSZip = require(\"jszip\");\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\nimport { splitPath } from \"../utils\";\r\nimport { parseRelationships, Relationship } from \"./relationship\";\r\n\r\nexport class Package {\r\n    xmlParser: XmlParser = new XmlParser();\r\n\r\n    constructor(private _zip: JSZip) {\r\n    }\r\n\r\n    exists(path: string): boolean {\r\n        return this._zip.files[path] != null;\r\n    }\r\n\r\n    load(path: string, type: \"xml\" | JSZip.OutputType): Promise<any> {\r\n        let file = this._zip.files[path];\r\n\r\n        if (file == null)\r\n            return Promise.resolve(null);\r\n\r\n        if (type == \"xml\")\r\n            return file.async(\"string\").then(t => this.xmlParser.parse(t));\r\n\r\n        return file.async(type);\r\n    }\r\n\r\n    loadRelationships(path: string = null): Promise<Relationship[]> {\r\n        let relsPath = `_rels/.rels`;\r\n\r\n        if (path != null) {\r\n            let [f, fn] = splitPath(path);\r\n            relsPath = `${f}_rels/${fn}.rels`;\r\n        }\r\n\r\n        return this.load(relsPath, \"xml\").then(xml => {\r\n            return xml == null ? null : parseRelationships(xml, this.xmlParser);\r\n        })\r\n    }\r\n}","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { DocumentElement } from \"./document\";\r\n\r\nexport class DocumentPart extends Part {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(path: string, parser: DocumentParser) {\r\n        super(path);\r\n        this._documentParser = parser;\r\n    }\r\n    \r\n    body: DocumentElement\r\n\r\n    load(pkg: Package) {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"string\"))\r\n            .then(xml => {\r\n                this.body = this._documentParser.parseDocumentFile(xml);\r\n            });\r\n    }\r\n}","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomNumbering } from \"../dom/dom\";\r\nimport { AbstractNumbering, Numbering, NumberingBulletPicture, NumberingPartProperties, parseNumberingPart } from \"./numbering\";\r\n\r\nexport class NumberingPart extends Part implements NumberingPartProperties {\r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(path: string, parser: DocumentParser) {\r\n        super(path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n    \r\n    domNumberings: IDomNumbering[];\r\n\r\n    load(pkg: Package) {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"xml\"))\r\n            .then(xml => {\r\n                Object.assign(this, parseNumberingPart(xml, pkg.xmlParser));\r\n                this.domNumberings = this._documentParser.parseNumberingFile(xml);\r\n            })\r\n    }\r\n}","import { NumberingPicBullet } from \"../dom/dom\";\r\nimport { ParagraphProperties, parseParagraphProperties } from \"../dom/paragraph\";\r\nimport { parseRunProperties, RunProperties } from \"../dom/run\";\r\nimport { XmlParser } from \"../parser/xml-parser\";\r\n\r\nexport interface NumberingPartProperties {\r\n    numberings: Numbering[];\r\n    abstractNumberings: AbstractNumbering[];\r\n    bulletPictures: NumberingBulletPicture[];\r\n}\r\n\r\nexport interface Numbering {\r\n    id: string;\r\n    abstractId: string;\r\n    overrides: NumberingLevelOverride[];\r\n}\r\n\r\nexport interface NumberingLevelOverride {\r\n    level: number;\r\n    start: number;\r\n    numberingLevel: NumberingLevel;\r\n}\r\n\r\nexport interface AbstractNumbering {\r\n    id: string;\r\n    name: string;\r\n    multiLevelType: \"singleLevel\" | \"multiLevel\" | \"hybridMultilevel\" | string;\r\n    levels: NumberingLevel[];\r\n    numberingStyleLink: string;\r\n    styleLink: string;\r\n}\r\n\r\nexport interface NumberingLevel {\r\n    level: number;\r\n    start: string;\r\n    restart: number;\r\n    format: 'lowerRoman' | 'lowerLetter' | string;\r\n    text: string;\r\n    justification: string;\r\n    bulletPictureId: string;\r\n    paragraphProps: ParagraphProperties;\r\n    runProps: RunProperties;\r\n}\r\n\r\nexport interface NumberingBulletPicture {\r\n    id: string;\r\n    referenceId: string;\r\n    style: string;\r\n}\r\n\r\nexport function parseNumberingPart(elem: Element, xml: XmlParser): NumberingPartProperties {\r\n    let result: NumberingPartProperties = {\r\n        numberings: [],\r\n        abstractNumberings: [],\r\n        bulletPictures: []\r\n    }\r\n    \r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"num\":\r\n                result.numberings.push(parseNumbering(e, xml));\r\n                break;\r\n            case \"abstractNum\":\r\n                result.abstractNumberings.push(parseAbstractNumbering(e, xml));\r\n                break;\r\n            case \"numPicBullet\":\r\n                result.bulletPictures.push(parseNumberingBulletPicture(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumbering(elem: Element, xml: XmlParser): Numbering {\r\n    let result = <Numbering>{\r\n        id: xml.attr(elem, 'numId'),\r\n        overrides: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"abstractNumId\":\r\n                result.abstractId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlOverride\":\r\n                result.overrides.push(parseNumberingLevelOverrride(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseAbstractNumbering(elem: Element, xml: XmlParser): AbstractNumbering {\r\n    let result = <AbstractNumbering>{\r\n        id: xml.attr(elem, 'abstractNumId'),\r\n        levels: []\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"name\":\r\n                result.name = xml.attr(e, \"val\");\r\n                break;\r\n            case \"multiLevelType\":\r\n                result.multiLevelType = xml.attr(e, \"val\");\r\n                break;\r\n            case \"numStyleLink\":\r\n                result.numberingStyleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"styleLink\":\r\n                result.styleLink = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.levels.push(parseNumberingLevel(e, xml));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevel(elem: Element, xml: XmlParser): NumberingLevel {\r\n    let result = <NumberingLevel>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"start\":\r\n                result.start = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlRestart\":\r\n                result.restart = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"numFmt\":\r\n                result.format = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlText\":\r\n                result.text = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlJc\":\r\n                result.justification = xml.attr(e, \"val\");\r\n                break;\r\n            case \"lvlPicBulletId\":\r\n                result.bulletPictureId = xml.attr(e, \"val\");\r\n                break;\r\n            case \"pPr\":\r\n                result.paragraphProps = parseParagraphProperties(e, xml);\r\n                break;\r\n            case \"rPr\":\r\n                result.runProps = parseRunProperties(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingLevelOverrride(elem: Element, xml: XmlParser): NumberingLevelOverride {\r\n    let result = <NumberingLevelOverride>{\r\n        level: xml.intAttr(elem, 'ilvl')\r\n    };\r\n\r\n    for (let e of xml.elements(elem)) {\r\n        switch (e.localName) {\r\n            case \"startOverride\":\r\n                result.start = xml.intAttr(e, \"val\");\r\n                break;\r\n            case \"lvl\":\r\n                result.numberingLevel = parseNumberingLevel(e, xml);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function parseNumberingBulletPicture(elem: Element, xml: XmlParser): NumberingBulletPicture {\r\n    //TODO\r\n    var pict = xml.element(elem, \"pict\");\r\n    var shape = pict && xml.element(pict, \"shape\");\r\n    var imagedata = shape && xml.element(shape, \"imagedata\");\r\n\r\n    return imagedata ? {\r\n        id: xml.attr(elem, \"numPicBulletId\"),\r\n        referenceId: xml.attr(imagedata, \"id\"),\r\n        style: xml.attr(shape, \"style\")\r\n    } : null;\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { Length } from \"./common\";\r\n\r\nexport interface LineSpacing {\r\n    after: Length;\r\n    before: Length;\r\n    line: number;\r\n    lineRule: \"atLeast\" | \"exactly\" | \"auto\";\r\n}\r\n\r\nexport function parseLineSpacing(elem: Element, xml: XmlParser): LineSpacing {\r\n    return {\r\n        before: xml.lengthAttr(elem, \"before\"),\r\n        after: xml.lengthAttr(elem, \"after\"),\r\n        line: xml.intAttr(elem, \"line\"),\r\n        lineRule: xml.attr(elem, \"lineRule\")\r\n    } as LineSpacing;\r\n}","import { Package } from \"../common/package\";\r\nimport { Part } from \"../common/part\";\r\nimport { DocumentParser } from \"../document-parser\";\r\nimport { IDomStyle } from \"../dom/style\";\r\n\r\nexport class StylesPart extends Part {\r\n    styles: IDomStyle[];\r\n    \r\n    private _documentParser: DocumentParser;\r\n\r\n    constructor(path: string, parser: DocumentParser) {\r\n        super(path);\r\n        this._documentParser = parser;\r\n    }\r\n\r\n    load(pkg: Package) {\r\n        return super.load(pkg)\r\n            .then(() => pkg.load(this.path, \"string\"))\r\n            .then(xml => {\r\n                this.styles = this._documentParser.parseStylesFile(xml);\r\n            })\r\n    }\r\n}","import {\r\n    DomType, IDomTable, IDomNumbering,\r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell,\r\n    IDomTableRow, NumberingPicBullet, TextElement, SymbolElement, BreakElement\r\n} from './dom/dom';\r\nimport * as utils from './utils';\r\nimport { DocumentElement } from './dom/document';\r\nimport { ParagraphElement, parseParagraphProperties, parseParagraphProperty } from './dom/paragraph';\r\nimport { parseSectionProperties } from './dom/section';\r\nimport globalXmlParser from './parser/xml-parser';\r\nimport { RunElement } from './dom/run';\r\nimport { parseBookmarkEnd, parseBookmarkStart } from './dom/bookmark';\r\nimport { IDomStyle, IDomSubStyle } from './dom/style';\r\n\r\nexport var autos = {\r\n    shd: \"white\",\r\n    color: \"black\",\r\n    highlight: \"transparent\"\r\n};\r\n\r\nexport class DocumentParser {\r\n    // removes XML declaration \r\n    skipDeclaration: boolean = true;\r\n\r\n    // ignores page and table sizes\r\n    ignoreWidth: boolean = false;\r\n    debug: boolean = false;\r\n\r\n    parseDocumentFile(xmlString: string) {\r\n        var result: DocumentElement = {\r\n            type: DomType.Document,\r\n            children: [],\r\n            cssStyle: {},\r\n            props: null\r\n        };\r\n\r\n        var xbody = globalXmlParser.element(globalXmlParser.parse(xmlString, this.skipDeclaration), \"body\");\r\n\r\n        xml.foreach(xbody, elem => {\r\n            switch (elem.localName) {\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(elem));\r\n                    break;\r\n\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(elem));\r\n                    break;\r\n\r\n                case \"sectPr\":\r\n                    result.props = parseSectionProperties(elem, globalXmlParser);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStylesFile(xmlString: string): IDomStyle[] {\r\n        var result = [];\r\n\r\n        var xstyles = globalXmlParser.parse(xmlString, this.skipDeclaration);\r\n\r\n        xml.foreach(xstyles, n => {\r\n            switch (n.localName) {\r\n                case \"style\":\r\n                    result.push(this.parseStyle(n));\r\n                    break;\r\n\r\n                case \"docDefaults\":\r\n                    result.push(this.parseDefaultStyles(n));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseDefaultStyles(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: null,\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: []\r\n        };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"rPrDefault\":\r\n                    var rPr = globalXmlParser.element(c, \"rPr\");\r\n\r\n                    if (rPr)\r\n                        result.styles.push({\r\n                            target: \"span\",\r\n                            values: this.parseDefaultProperties(rPr, {})\r\n                        });\r\n                    break;\r\n\r\n                case \"pPrDefault\":\r\n                    var pPr = globalXmlParser.element(c, \"pPr\");\r\n\r\n                    if (pPr)\r\n                        result.styles.push({\r\n                            target: \"p\",\r\n                            values: this.parseDefaultProperties(pPr, {})\r\n                        });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseStyle(node: Element): IDomStyle {\r\n        var result = <IDomStyle>{\r\n            id: xml.stringAttr(node, \"styleId\"),\r\n            isDefault: xml.boolAttr(node, \"default\"),\r\n            name: null,\r\n            target: null,\r\n            basedOn: null,\r\n            styles: [],\r\n            linked: null\r\n        };\r\n\r\n        switch (xml.stringAttr(node, \"type\")) {\r\n            case \"paragraph\": result.target = \"p\"; break;\r\n            case \"table\": result.target = \"table\"; break;\r\n            case \"character\": result.target = \"span\"; break;\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"basedOn\":\r\n                    result.basedOn = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"name\":\r\n                    result.name = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"link\":\r\n                    result.linked = xml.className(n, \"val\");\r\n                    break;\r\n\r\n                case \"aliases\":\r\n                    result.aliases = xml.stringAttr(n, \"val\").split(\",\");\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    result.styles.push({\r\n                        target: \"p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.paragraphProps = parseParagraphProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.styles.push({\r\n                        target: \"span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    result.runProps = parseParagraphProperties(n, globalXmlParser);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.styles.push({\r\n                        target: \"td\", //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblStylePr\":\r\n                    for (let s of this.parseTableStyle(n))\r\n                        result.styles.push(s);\r\n                    break;\r\n\r\n                case \"rsid\":\r\n                case \"qFormat\":\r\n                case \"hidden\":\r\n                case \"semiHidden\":\r\n                case \"unhideWhenUsed\":\r\n                case \"autoRedefine\":\r\n                case \"uiPriority\":\r\n                    //TODO: ignore\r\n                    break;\r\n\r\n                default:\r\n                    this.debug && console.warn(`DOCX: Unknown style element: ${n.localName}`);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableStyle(node: Element): IDomSubStyle[] {\r\n        var result = [];\r\n\r\n        var type = xml.stringAttr(node, \"type\");\r\n        var selector = \"\";\r\n\r\n        switch (type) {\r\n            case \"firstRow\": selector = \"tr.first-row td\"; break;\r\n            case \"lastRow\": selector = \"tr.last-row td\"; break;\r\n            case \"firstCol\": selector = \"td.first-col\"; break;\r\n            case \"lastCol\": selector = \"td.last-col\"; break;\r\n            case \"band1Vert\": selector = \"td.odd-col\"; break;\r\n            case \"band2Vert\": selector = \"td.even-col\"; break;\r\n            case \"band1Horz\": selector = \"tr.odd-row\"; break;\r\n            case \"band2Horz\": selector = \"tr.even-row\"; break;\r\n            default: return [];\r\n        }\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    result.push({\r\n                        target: selector + \" p\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    result.push({\r\n                        target: selector + \" span\",\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                case \"tcPr\":\r\n                    result.push({\r\n                        target: selector, //TODO: maybe move to processor\r\n                        values: this.parseDefaultProperties(n, {})\r\n                    });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingFile(xnums: Element): IDomNumbering[] {\r\n        var result = [];\r\n        var mapping = {};\r\n        var bullets = [];\r\n\r\n        xml.foreach(xnums, n => {\r\n            switch (n.localName) {\r\n                case \"abstractNum\":\r\n                    this.parseAbstractNumbering(n, bullets)\r\n                        .forEach(x => result.push(x));\r\n                    break;\r\n\r\n                case \"numPicBullet\":\r\n                    bullets.push(this.parseNumberingPicBullet(n));\r\n                    break;\r\n\r\n                case \"num\":\r\n                    var numId = xml.stringAttr(n, \"numId\");\r\n                    var abstractNumId = xml.elementStringAttr(n, \"abstractNumId\", \"val\");\r\n                    mapping[abstractNumId] = numId;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        result.forEach(x => x.id = mapping[x.id]);\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingPicBullet(elem: Element): NumberingPicBullet {\r\n        var pict = globalXmlParser.element(elem, \"pict\");\r\n        var shape = pict && globalXmlParser.element(pict, \"shape\");\r\n        var imagedata = shape && globalXmlParser.element(shape, \"imagedata\");\r\n\r\n        return imagedata ? {\r\n            id: xml.intAttr(elem, \"numPicBulletId\"),\r\n            src: xml.stringAttr(imagedata, \"id\"),\r\n            style: xml.stringAttr(shape, \"style\")\r\n        } : null;\r\n    }\r\n\r\n    parseAbstractNumbering(node: Element, bullets: any[]): IDomNumbering[] {\r\n        var result = [];\r\n        var id = xml.stringAttr(node, \"abstractNumId\");\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"lvl\":\r\n                    result.push(this.parseNumberingLevel(id, n, bullets));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseNumberingLevel(id: string, node: Element, bullets: any[]): IDomNumbering {\r\n        var result: IDomNumbering = {\r\n            id: id,\r\n            level: xml.intAttr(node, \"ilvl\"),\r\n            style: {}\r\n        };\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"pPr\":\r\n                    this.parseDefaultProperties(n, result.style);\r\n                    break;\r\n\r\n                case \"lvlPicBulletId\":\r\n                    var id = xml.intAttr(n, \"val\");\r\n                    result.bullet = bullets.filter(x => x.id == id)[0];\r\n                    break;\r\n\r\n                case \"lvlText\":\r\n                    result.levelText = xml.stringAttr(n, \"val\");\r\n                    break;\r\n\r\n                case \"numFmt\":\r\n                    result.format = xml.stringAttr(n, \"val\");\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    parseParagraph(node: Element): OpenXmlElement {\r\n        var result = <ParagraphElement>{ type: DomType.Paragraph, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n\r\n                case \"hyperlink\":\r\n                    result.children.push(this.parseHyperlink(c, result));\r\n                    break;\r\n\r\n                case \"bookmarkStart\":\r\n                    result.children.push(parseBookmarkStart(c, globalXmlParser));\r\n                    break;               \r\n\r\n                    case \"bookmarkEnd\":\r\n                    result.children.push(parseBookmarkEnd(c, globalXmlParser));\r\n                    break;\r\n\r\n                case \"pPr\":\r\n                    this.parseParagraphProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseParagraphProperties(elem: Element, paragraph: ParagraphElement) {\r\n        this.parseDefaultProperties(elem, paragraph.cssStyle = {}, null, c => {\r\n            if(parseParagraphProperty(c, paragraph, globalXmlParser))\r\n                return true;\r\n\r\n            switch (c.localName) {\r\n                case \"pStyle\":\r\n                    utils.addElementClass(paragraph, xml.className(c, \"val\"));\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    utils.addElementClass(paragraph, values.classNameOfCnfStyle(c));\r\n                    break;\r\n\r\n                case \"framePr\":\r\n                    this.parseFrame(c, paragraph);\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseFrame(node: Element, paragraph: ParagraphElement) {\r\n        var dropCap = xml.stringAttr(node, \"dropCap\");\r\n\r\n        if (dropCap == \"drop\")\r\n            paragraph.cssStyle[\"float\"] = \"left\";\r\n    }\r\n\r\n    parseHyperlink(node: Element, parent?: OpenXmlElement): IDomHyperlink {\r\n        var result: IDomHyperlink = <IDomHyperlink>{ type: DomType.Hyperlink, parent: parent, children: [] };\r\n        var anchor = xml.stringAttr(node, \"anchor\");\r\n\r\n        if (anchor)\r\n            result.href = \"#\" + anchor;\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"r\":\r\n                    result.children.push(this.parseRun(c, result));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRun(node: Element, parent?: OpenXmlElement): RunElement {\r\n        var result: RunElement = <RunElement>{ type: DomType.Run, parent: parent, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"t\":\r\n                    result.children.push(<TextElement>{ \r\n                        type: DomType.Text, \r\n                        text: c.textContent \r\n                    });//.replace(\" \", \"\\u00A0\"); // TODO\r\n                    break;\r\n                \r\n                case \"fldChar\":\r\n                    result.fldCharType = xml.stringAttr(c, \"fldCharType\");\r\n                    break;\r\n\r\n                case \"br\":\r\n                    result.children.push(<BreakElement>{ \r\n                        type: DomType.Break, \r\n                        break: xml.stringAttr(c, \"type\") || \"textWrapping\"\r\n                    });\r\n                    break;\r\n\r\n                case \"lastRenderedPageBreak\":\r\n                    result.children.push(<BreakElement>{ \r\n                        type: DomType.Break, \r\n                        break: \"page\"\r\n                    });\r\n                    break;\r\n                \r\n                case \"sym\":\r\n                    result.children.push(<SymbolElement>{ \r\n                        type: DomType.Symbol, \r\n                        font: xml.stringAttr(c, \"font\"),\r\n                        char: xml.stringAttr(c, \"char\")\r\n                    });\r\n                    break;\r\n\r\n                case \"tab\":\r\n                    result.children.push({ type: DomType.Tab });\r\n                    break;\r\n\r\n                case \"instrText\":\r\n                    result.instrText = c.textContent;\r\n                    break;\r\n\r\n                case \"drawing\":\r\n                    let d = this.parseDrawing(c);\r\n\r\n                    if (d)\r\n                        result.children = [d];\r\n                    break;\r\n\r\n                case \"rPr\":\r\n                    this.parseRunProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseRunProperties(elem: Element, run: RunElement) {\r\n        this.parseDefaultProperties(elem, run.cssStyle = {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"rStyle\":\r\n                    run.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"vertAlign\":\r\n                    switch (xml.stringAttr(c, \"val\")) {\r\n                        case \"subscript\": run.wrapper = \"sub\"; break;\r\n                        case \"superscript\": run.wrapper = \"sup\"; break;\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDrawing(node: Element): OpenXmlElement {\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"inline\":\r\n                case \"anchor\":\r\n                    return this.parseDrawingWrapper(n);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseDrawingWrapper(node: Element): OpenXmlElement {\r\n        var result = <OpenXmlElement>{ type: DomType.Drawing, children: [], cssStyle: {} };\r\n        var isAnchor = node.localName == \"anchor\";\r\n\r\n        //TODO\r\n        // result.style[\"margin-left\"] = xml.sizeAttr(node, \"distL\", SizeType.Emu);\r\n        // result.style[\"margin-top\"] = xml.sizeAttr(node, \"distT\", SizeType.Emu);\r\n        // result.style[\"margin-right\"] = xml.sizeAttr(node, \"distR\", SizeType.Emu);\r\n        // result.style[\"margin-bottom\"] = xml.sizeAttr(node, \"distB\", SizeType.Emu);\r\n\r\n        let wrapType: \"wrapTopAndBottom\" | \"wrapNone\" | null = null; \r\n        let simplePos = xml.boolAttr(node, \"simplePos\");\r\n\r\n        let posX = { relative: \"page\", align: \"left\", offset: \"0\" };\r\n        let posY = { relative: \"page\", align: \"top\", offset: \"0\" };\r\n\r\n        for (var n of globalXmlParser.elements(node)) {\r\n            switch (n.localName) {\r\n                case \"simplePos\":\r\n                    if (simplePos) {\r\n                        posX.offset = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                        posY.offset = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"extent\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"positionH\":\r\n                case \"positionV\":\r\n                    if (!simplePos) {\r\n                        let pos = n.localName == \"positionH\" ? posX : posY;\r\n                        var alignNode = globalXmlParser.element(n, \"align\");\r\n                        var offsetNode = globalXmlParser.element(n, \"posOffset\");\r\n\r\n                        if (alignNode)\r\n                            pos.align = alignNode.textContent;\r\n\r\n                        if (offsetNode)\r\n                            pos.offset = xml.sizeValue(offsetNode, SizeType.Emu);\r\n                    }\r\n                    break;\r\n\r\n                case \"wrapTopAndBottom\":\r\n                    wrapType = \"wrapTopAndBottom\";\r\n                    break;\r\n                \r\n                case \"wrapNone\":\r\n                    wrapType = \"wrapNone\";\r\n                    break;\r\n\r\n                case \"graphic\":\r\n                    var g = this.parseGraphic(n);\r\n\r\n                    if (g)\r\n                        result.children.push(g);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (wrapType == \"wrapTopAndBottom\") {\r\n            result.cssStyle['display'] = 'block';\r\n\r\n            if (posX.align) {\r\n                result.cssStyle['text-align'] = posX.align;\r\n                result.cssStyle['width'] = \"100%\";\r\n            }\r\n        }\r\n        else if(wrapType == \"wrapNone\") {\r\n            result.cssStyle['display'] = 'block';\r\n            result.cssStyle['position'] = 'relative';\r\n            result.cssStyle[\"width\"] = \"0px\";\r\n            result.cssStyle[\"height\"] = \"0px\";\r\n\r\n            if(posX.offset)\r\n                result.cssStyle[\"left\"] = posX.offset;\r\n            if(posY.offset)\r\n                result.cssStyle[\"top\"] = posY.offset;\r\n        }\r\n        else if (isAnchor && (posX.align == 'left' || posX.align == 'right')) {\r\n            result.cssStyle[\"float\"] = posX.align;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseGraphic(elem: Element): OpenXmlElement {\r\n        var graphicData = globalXmlParser.element(elem, \"graphicData\");\r\n\r\n        for (let n of globalXmlParser.elements(graphicData)) {\r\n            switch (n.localName) {\r\n                case \"pic\":\r\n                    return this.parsePicture(n);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    parsePicture(elem: Element): IDomImage {\r\n        var result = <IDomImage>{ type: DomType.Image, src: \"\", cssStyle: {} };\r\n        var blipFill = globalXmlParser.element(elem, \"blipFill\");\r\n        var blip = globalXmlParser.element(blipFill, \"blip\");\r\n\r\n        result.src = xml.stringAttr(blip, \"embed\");\r\n\r\n        var spPr = globalXmlParser.element(elem, \"spPr\");\r\n        var xfrm = globalXmlParser.element(spPr, \"xfrm\");\r\n\r\n        result.cssStyle[\"position\"] = \"relative\";\r\n\r\n        for (var n of globalXmlParser.elements(xfrm)) {\r\n            switch (n.localName) {\r\n                case \"ext\":\r\n                    result.cssStyle[\"width\"] = xml.sizeAttr(n, \"cx\", SizeType.Emu);\r\n                    result.cssStyle[\"height\"] = xml.sizeAttr(n, \"cy\", SizeType.Emu);\r\n                    break;\r\n\r\n                case \"off\":\r\n                    result.cssStyle[\"left\"] = xml.sizeAttr(n, \"x\", SizeType.Emu);\r\n                    result.cssStyle[\"top\"] = xml.sizeAttr(n, \"y\", SizeType.Emu);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTable(node: Element): IDomTable {\r\n        var result: IDomTable = { type: DomType.Table, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tr\":\r\n                    result.children.push(this.parseTableRow(c));\r\n                    break;\r\n\r\n                case \"tblGrid\":\r\n                    result.columns = this.parseTableColumns(c);\r\n                    break;\r\n\r\n                case \"tblPr\":\r\n                    this.parseTableProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableColumns(node: Element): IDomTableColumn[] {\r\n        var result = [];\r\n\r\n        xml.foreach(node, n => {\r\n            switch (n.localName) {\r\n                case \"gridCol\":\r\n                    result.push({ width: xml.sizeAttr(n, \"w\") });\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableProperties(elem: Element, table: IDomTable) {\r\n        table.cssStyle = {};\r\n        table.cellStyle = {};\r\n\r\n        this.parseDefaultProperties(elem, table.cssStyle, table.cellStyle, c => {\r\n            switch (c.localName) {\r\n                case \"tblStyle\":\r\n                    table.className = xml.className(c, \"val\");\r\n                    break;\r\n\r\n                case \"tblLook\":\r\n                    utils.addElementClass(table, values.classNameOftblLook(c));\r\n                    break;\r\n\r\n                case \"tblpPr\":\r\n                    this.parseTablePosition(c, table);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        switch (table.cssStyle[\"text-align\"]) {\r\n            case \"center\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                table.cssStyle[\"margin-right\"] = \"auto\";\r\n                break;\r\n\r\n            case \"right\":\r\n                delete table.cssStyle[\"text-align\"];\r\n                table.cssStyle[\"margin-left\"] = \"auto\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseTablePosition(node: Element, table: IDomTable) {\r\n        var topFromText = xml.sizeAttr(node, \"topFromText\");\r\n        var bottomFromText = xml.sizeAttr(node, \"bottomFromText\");\r\n        var rightFromText = xml.sizeAttr(node, \"rightFromText\");\r\n        var leftFromText = xml.sizeAttr(node, \"leftFromText\");\r\n\r\n        table.cssStyle[\"float\"] = 'left';\r\n        table.cssStyle[\"margin-bottom\"] = values.addSize(table.cssStyle[\"margin-bottom\"], bottomFromText);\r\n        table.cssStyle[\"margin-left\"] = values.addSize(table.cssStyle[\"margin-left\"], leftFromText);\r\n        table.cssStyle[\"margin-right\"] = values.addSize(table.cssStyle[\"margin-right\"], rightFromText);\r\n        table.cssStyle[\"margin-top\"] = values.addSize(table.cssStyle[\"margin-top\"], topFromText);\r\n    }\r\n\r\n    parseTableRow(node: Element): IDomTableRow {\r\n        var result: IDomTableRow = { type: DomType.Row, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tc\":\r\n                    result.children.push(this.parseTableCell(c));\r\n                    break;\r\n\r\n                case \"trPr\":\r\n                    this.parseTableRowProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableRowProperties(elem: Element, row: IDomTableRow) {\r\n        row.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"cnfStyle\":\r\n                    row.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseTableCell(node: Element): OpenXmlElement {\r\n        var result: IDomTableCell = { type: DomType.Cell, children: [] };\r\n\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"tbl\":\r\n                    result.children.push(this.parseTable(c));\r\n                    break;\r\n\r\n                case \"p\":\r\n                    result.children.push(this.parseParagraph(c));\r\n                    break;\r\n\r\n                case \"tcPr\":\r\n                    this.parseTableCellProperties(c, result);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    parseTableCellProperties(elem: Element, cell: IDomTableCell) {\r\n        cell.cssStyle = this.parseDefaultProperties(elem, {}, null, c => {\r\n            switch (c.localName) {\r\n                case \"gridSpan\":\r\n                    cell.span = xml.intAttr(c, \"val\", null);\r\n                    break;\r\n\r\n                case \"vMerge\": //TODO\r\n                    break;\r\n\r\n                case \"cnfStyle\":\r\n                    cell.className = values.classNameOfCnfStyle(c);\r\n                    break;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    parseDefaultProperties(elem: Element, style: Record<string, string> = null, childStyle: Record<string, string> = null, handler: (prop: Element) => boolean = null): Record<string, string> {\r\n        style = style || {};\r\n\r\n        let spacing = null;\r\n\r\n        xml.foreach(elem, c => {\r\n            switch (c.localName) {\r\n                case \"jc\":\r\n                    style[\"text-align\"] = values.valueOfJc(c);\r\n                    break;\r\n\r\n                case \"textAlignment\":\r\n                    style[\"vertical-align\"] = values.valueOfTextAlignment(c);\r\n                    break;\r\n\r\n                case \"color\":\r\n                    style[\"color\"] = xml.colorAttr(c, \"val\", null, autos.color);\r\n                    break;\r\n\r\n                case \"sz\":\r\n                    style[\"font-size\"] = style[\"min-height\"] = xml.sizeAttr(c, \"val\", SizeType.FontSize);\r\n                    break;\r\n\r\n                case \"shd\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"fill\", null, autos.shd);\r\n                    break;\r\n\r\n                case \"highlight\":\r\n                    style[\"background-color\"] = xml.colorAttr(c, \"val\", null, autos.highlight);\r\n                    break;\r\n\r\n                case \"tcW\":\r\n                    if (this.ignoreWidth)\r\n                        break;\r\n\r\n                case \"tblW\":\r\n                    style[\"width\"] = values.valueOfSize(c, \"w\");\r\n                    break;\r\n\r\n                case \"trHeight\":\r\n                    this.parseTrHeight(c, style);\r\n                    break;\r\n\r\n                case \"strike\":\r\n                    style[\"text-decoration\"] = values.valueOfStrike(c);\r\n                    break;\r\n\r\n                case \"b\":\r\n                    style[\"font-weight\"] = values.valueOfBold(c);\r\n                    break;\r\n\r\n                case \"i\":\r\n                    style[\"font-style\"] = \"italic\";\r\n                    break;\r\n\r\n                case \"u\":\r\n                    this.parseUnderline(c, style);\r\n                    break;\r\n\r\n                case \"ind\":\r\n                case \"tblInd\":\r\n                    this.parseIndentation(c, style);\r\n                    break;\r\n\r\n                case \"rFonts\":\r\n                    this.parseFont(c, style);\r\n                    break;\r\n\r\n                case \"tblBorders\":\r\n                    this.parseBorderProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblCellSpacing\":\r\n                    style[\"border-spacing\"] = values.valueOfMargin(c);\r\n                    style[\"border-collapse\"] = \"separate\";\r\n                    break;\r\n\r\n                case \"pBdr\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n                \r\n                case \"bdr\":\r\n                    style[\"border\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"tcBorders\":\r\n                    this.parseBorderProperties(c, style);\r\n                    break;\r\n\r\n                case \"noWrap\":\r\n                    //TODO\r\n                    //style[\"white-space\"] = \"nowrap\";\r\n                    break;\r\n\r\n                case \"tblCellMar\":\r\n                case \"tcMar\":\r\n                    this.parseMarginProperties(c, childStyle || style);\r\n                    break;\r\n\r\n                case \"tblLayout\":\r\n                    style[\"table-layout\"] = values.valueOfTblLayout(c);\r\n                    break;\r\n\r\n                case \"vAlign\":\r\n                    style[\"vertical-align\"] = xml.stringAttr(c, \"val\");\r\n                    break;\r\n\r\n                case \"spacing\":\r\n                    if (elem.localName == \"pPr\")\r\n                        this.parseSpacing(c, style);\r\n                    break;\r\n\r\n                case \"lang\":\r\n                case \"noProof\": //ignore spellcheck\r\n                case \"webHidden\": // maybe web-hidden should be implemented\r\n                    //TODO ignore\r\n                    break;\r\n\r\n                default:\r\n                    if (handler != null && !handler(c))\r\n                        this.debug && console.warn(`DOCX: Unknown document element: ${c.localName}`);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return style;\r\n    }\r\n\r\n    parseUnderline(node: Element, style: Record<string, string>) {\r\n        var val = xml.stringAttr(node, \"val\");\r\n\r\n        if (val == null || val == \"none\")\r\n            return;\r\n\r\n        switch (val) {\r\n            case \"dash\":\r\n            case \"dashDotDotHeavy\":\r\n            case \"dashDotHeavy\":\r\n            case \"dashedHeavy\":\r\n            case \"dashLong\":\r\n            case \"dashLongHeavy\":\r\n            case \"dotDash\":\r\n            case \"dotDotDash\":\r\n                style[\"text-decoration-style\"] = \"dashed\";\r\n                break;\r\n\r\n            case \"dotted\":\r\n            case \"dottedHeavy\":\r\n                style[\"text-decoration-style\"] = \"dotted\";\r\n                break;\r\n\r\n            case \"double\":\r\n                style[\"text-decoration-style\"] = \"double\";\r\n                break;\r\n\r\n            case \"single\":\r\n            case \"thick\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n\r\n            case \"wave\":\r\n            case \"wavyDouble\":\r\n            case \"wavyHeavy\":\r\n                style[\"text-decoration-style\"] = \"wavy\";\r\n                break;\r\n\r\n            case \"words\":\r\n                style[\"text-decoration\"] = \"underline\";\r\n                break;\r\n        }\r\n\r\n        var col = xml.colorAttr(node, \"color\");\r\n\r\n        if (col)\r\n            style[\"text-decoration-color\"] = col;\r\n    }\r\n\r\n    parseFont(node: Element, style: Record<string, string>) {\r\n        var ascii = xml.stringAttr(node, \"ascii\");\r\n\r\n        if (ascii)\r\n            style[\"font-family\"] = ascii;\r\n    }\r\n\r\n    parseIndentation(node: Element, style: Record<string, string>) {\r\n        var firstLine = xml.sizeAttr(node, \"firstLine\");\r\n        var left = xml.sizeAttr(node, \"left\");\r\n        var start = xml.sizeAttr(node, \"start\");\r\n        var right = xml.sizeAttr(node, \"right\");\r\n        var end = xml.sizeAttr(node, \"end\");\r\n\r\n        if (firstLine) style[\"text-indent\"] = firstLine;\r\n        if (left || start) style[\"margin-left\"] = left || start;\r\n        if (right || end) style[\"margin-right\"] = right || end;\r\n    }\r\n\r\n    parseSpacing(node: Element, style: Record<string, string>) {\r\n        var before = xml.sizeAttr(node, \"before\");\r\n        var after = xml.sizeAttr(node, \"after\");\r\n        var line = xml.intAttr(node, \"line\", null);\r\n        var lineRule = xml.stringAttr(node, \"lineRule\");\r\n\r\n        if (before) style[\"margin-top\"] = before;\r\n        if (after) style[\"margin-bottom\"] = after;\r\n        \r\n        if (line !== null) {\r\n            switch(lineRule) {\r\n                case \"auto\": \r\n                    style[\"line-height\"] = `${(line / 240).toFixed(2)}`;\r\n                    break;\r\n\r\n                case \"atLeast\":\r\n                    style[\"line-height\"] = `calc(100% + ${line / 20}pt)`;\r\n                    break;\r\n\r\n                default:\r\n                    style[\"line-height\"] = style[\"min-height\"] = `${line / 20}pt`\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseMarginProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"left\":\r\n                    output[\"padding-left\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"right\":\r\n                    output[\"padding-right\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"padding-top\"] = values.valueOfMargin(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"padding-bottom\"] = values.valueOfMargin(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseTrHeight(node: Element, output: Record<string, string>) {\r\n        switch (xml.stringAttr(node, \"hRule\")) {\r\n            case \"exact\":\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                break;\r\n\r\n            case \"atLeast\":\r\n            default:\r\n                output[\"height\"] = xml.sizeAttr(node, \"val\");\r\n                // min-height doesn't work for tr\r\n                //output[\"min-height\"] = xml.sizeAttr(node, \"val\");  \r\n                break;\r\n        }\r\n    }\r\n\r\n    parseBorderProperties(node: Element, output: Record<string, string>) {\r\n        xml.foreach(node, c => {\r\n            switch (c.localName) {\r\n                case \"start\":\r\n                case \"left\":\r\n                    output[\"border-left\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"end\":\r\n                case \"right\":\r\n                    output[\"border-right\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"top\":\r\n                    output[\"border-top\"] = values.valueOfBorder(c);\r\n                    break;\r\n\r\n                case \"bottom\":\r\n                    output[\"border-bottom\"] = values.valueOfBorder(c);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nenum SizeType {\r\n    FontSize,\r\n    Dxa,\r\n    Emu,\r\n    Border,\r\n    Percent\r\n}\r\n\r\nclass xml {\r\n    static foreach(node: Element, cb: (n: Element) => void) {\r\n        for (var i = 0; i < node.childNodes.length; i++) {\r\n            let n = node.childNodes[i];\r\n\r\n            if (n.nodeType == 1)\r\n                cb(<Element>n);\r\n        }\r\n    }\r\n\r\n    static elementStringAttr(elem: Element, nodeName, attrName: string) {\r\n        var n = globalXmlParser.element(elem, nodeName)\r\n        return n ? xml.stringAttr(n, attrName) : null;\r\n    }\r\n\r\n    static stringAttr(node: Element, attrName: string) {\r\n        return globalXmlParser.attr(node, attrName);\r\n    }\r\n\r\n    static colorAttr(node: Element, attrName: string, defValue: string = null, autoColor: string = 'black') {\r\n        var v = xml.stringAttr(node, attrName);\r\n\r\n        switch (v) {\r\n            case \"yellow\":\r\n                return v;\r\n\r\n            case \"auto\":\r\n                return autoColor;\r\n        }\r\n\r\n        return v ? `#${v}` : defValue;\r\n    }\r\n\r\n    static boolAttr(node: Element, attrName: string, defValue: boolean = false) {\r\n        return globalXmlParser.boolAttr(node, attrName, defValue);\r\n    }\r\n\r\n    static intAttr(node: Element, attrName: string, defValue: number = 0) {\r\n        var val = xml.stringAttr(node, attrName);\r\n        return val ? parseInt(xml.stringAttr(node, attrName)) : defValue;\r\n    }\r\n\r\n    static sizeAttr(node: Element, attrName: string, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(xml.stringAttr(node, attrName), type);\r\n    }\r\n\r\n    static sizeValue(node: Element, type: SizeType = SizeType.Dxa) {\r\n        return xml.convertSize(node.textContent, type);\r\n    }\r\n\r\n    static convertSize(val: string, type: SizeType = SizeType.Dxa) {\r\n        if (val == null || val.indexOf(\"pt\") > -1)\r\n            return val;\r\n\r\n        var intVal = parseInt(val);\r\n\r\n        switch (type) {\r\n            case SizeType.Dxa: return (0.05 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Emu: return (intVal / 12700).toFixed(2) + \"pt\";\r\n            case SizeType.FontSize: return (0.5 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Border: return (0.125 * intVal).toFixed(2) + \"pt\";\r\n            case SizeType.Percent: return (0.02 * intVal).toFixed(2) + \"%\";\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    static className(node: Element, attrName: string) {\r\n        var val = xml.stringAttr(node, attrName);\r\n\r\n        return val && val.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nclass values {\r\n    static valueOfBold(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"bold\" : \"normal\"\r\n    }\r\n\r\n    static valueOfSize(c: Element, attr: string) {\r\n        var type: SizeType = SizeType.Dxa;\r\n\r\n        switch (xml.stringAttr(c, \"type\")) {\r\n            case \"dxa\": break;\r\n            case \"pct\": type = SizeType.Percent; break;\r\n        }\r\n\r\n        return xml.sizeAttr(c, attr, type);\r\n    }\r\n\r\n    static valueOfStrike(c: Element) {\r\n        return xml.boolAttr(c, \"val\", true) ? \"line-through\" : \"none\"\r\n    }\r\n\r\n    static valueOfMargin(c: Element) {\r\n        return xml.sizeAttr(c, \"w\");\r\n    }\r\n\r\n    static valueOfBorder(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        if (type == \"nil\")\r\n            return \"none\";\r\n\r\n        var color = xml.colorAttr(c, \"color\");\r\n        var size = xml.sizeAttr(c, \"sz\", SizeType.Border);\r\n\r\n        return `${size} solid ${color == \"auto\" ? \"black\" : color}`;\r\n    }\r\n\r\n    static valueOfTblLayout(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n        return type == \"fixed\" ? \"fixed\" : \"auto\";\r\n    }\r\n\r\n    static classNameOfCnfStyle(c: Element) {\r\n        let className = \"\";\r\n        let val = xml.stringAttr(c, \"val\");\r\n        //FirstRow, LastRow, FirstColumn, LastColumn, Band1Vertical, Band2Vertical, Band1Horizontal, Band2Horizontal, NE Cell, NW Cell, SE Cell, SW Cell.\r\n\r\n        if (val[0] == \"1\") className += \" first-row\";\r\n        if (val[1] == \"1\") className += \" last-row\";\r\n        if (val[2] == \"1\") className += \" first-col\";\r\n        if (val[3] == \"1\") className += \" last-col\";\r\n        if (val[4] == \"1\") className += \" odd-col\";\r\n        if (val[5] == \"1\") className += \" even-col\";\r\n        if (val[6] == \"1\") className += \" odd-row\";\r\n        if (val[7] == \"1\") className += \" even-row\";\r\n        if (val[8] == \"1\") className += \" ne-cell\";\r\n        if (val[9] == \"1\") className += \" nw-cell\";\r\n        if (val[10] == \"1\") className += \" se-cell\";\r\n        if (val[11] == \"1\") className += \" sw-cell\";\r\n\r\n        return className.trim();\r\n    }\r\n\r\n    static valueOfJc(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"start\":\r\n            case \"left\": return \"left\";\r\n            case \"center\": return \"center\";\r\n            case \"end\":\r\n            case \"right\": return \"right\";\r\n            case \"both\": return \"justify\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static valueOfTextAlignment(c: Element) {\r\n        var type = xml.stringAttr(c, \"val\");\r\n\r\n        switch (type) {\r\n            case \"auto\":\r\n            case \"baseline\": return \"baseline\";\r\n            case \"top\": return \"top\";\r\n            case \"center\": return \"middle\";\r\n            case \"bottom\": return \"bottom\";\r\n        }\r\n\r\n        return type;\r\n    }\r\n\r\n    static addSize(a: string, b: string): string {\r\n        if (a == null) return b;\r\n        if (b == null) return a;\r\n\r\n        return `calc(${a} + ${b})`; //TODO\r\n    }\r\n\r\n    static checkMask(num: number, mask: number) {\r\n        return (num & mask) == mask;\r\n    }\r\n\r\n    static classNameOftblLook(c: Element) {\r\n        let className = \"\";\r\n\r\n        if (xml.boolAttr(c, \"firstColumn\")) className += \" first-col\";\r\n        if (xml.boolAttr(c, \"firstRow\")) className += \" first-row\";\r\n        if (xml.boolAttr(c, \"lastColumn\")) className += \" lat-col\";\r\n        if (xml.boolAttr(c, \"lastRow\")) className += \" last-row\";\r\n        if (xml.boolAttr(c, \"noHBand\")) className += \" no-hband\";\r\n        if (xml.boolAttr(c, \"noVBand\")) className += \" no-vband\";\r\n\r\n        return className.trim();\r\n    }\r\n}","import { XmlParser } from \"../parser/xml-parser\";\r\nimport { DomType, OpenXmlElement } from \"./dom\";\r\n\r\nexport interface BookmarkStartElement extends OpenXmlElement {\r\n    id: string;\r\n    name: string;\r\n    colFirst: number;\r\n    colLast: number;\r\n}\r\n\r\nexport interface BookmarkEndElement extends OpenXmlElement {\r\n    id: string;\r\n}\r\n\r\nexport function parseBookmarkStart(elem: Element, xml: XmlParser): BookmarkStartElement {\r\n    return {\r\n        type: DomType.BookmarkStart,\r\n        id: xml.attr(elem, \"id\"),\r\n        name: xml.attr(elem, \"name\"),\r\n        colFirst: xml.intAttr(elem, \"colFirst\"),\r\n        colLast: xml.intAttr(elem, \"colLast\")\r\n    }\r\n}\r\n\r\nexport function parseBookmarkEnd(elem: Element, xml: XmlParser): BookmarkEndElement {\r\n    return {\r\n        type: DomType.BookmarkEnd,\r\n        id: xml.attr(elem, \"id\")\r\n    }\r\n}","import { WordDocument } from './word-document';\r\nimport { DomType, IDomTable, IDomNumbering, \r\n    IDomHyperlink, IDomImage, OpenXmlElement, IDomTableColumn, IDomTableCell, TextElement, SymbolElement, BreakElement } from './dom/dom';\r\nimport { Length, CommonProperties } from './dom/common';\r\nimport { Options } from './docx-preview';\r\nimport { DocumentElement } from './dom/document';\r\nimport { ParagraphElement } from './dom/paragraph';\r\nimport { appendClass, keyBy } from './utils';\r\nimport { updateTabStop } from './javascript';\r\nimport { FontTablePart } from './font-table/font-table';\r\nimport { SectionProperties } from './dom/section';\r\nimport { RunElement, RunProperties } from './dom/run';\r\nimport { BookmarkStartElement } from './dom/bookmark';\r\nimport { IDomStyle } from './dom/style';\r\nimport { NumberingPartProperties } from './numbering/numbering';\r\n\r\nexport class HtmlRenderer {\r\n\r\n    inWrapper: boolean = true;\r\n    className: string = \"docx\";\r\n    document: WordDocument;\r\n    options: Options;\r\n\r\n    constructor(public htmlDocument: HTMLDocument) {\r\n    }\r\n\r\n    render(document: WordDocument, bodyContainer: HTMLElement, styleContainer: HTMLElement = null, options: Options) {\r\n        this.document = document;\r\n        this.options = options;\r\n\r\n        styleContainer = styleContainer || bodyContainer;\r\n\r\n        removeAllElements(styleContainer);\r\n        removeAllElements(bodyContainer);\r\n\r\n        appendComment(styleContainer, \"docxjs library predefined styles\");\r\n        styleContainer.appendChild(this.renderDefaultStyle());\r\n        \r\n        if (document.stylesPart != null) {\r\n            appendComment(styleContainer, \"docx document styles\");\r\n            styleContainer.appendChild(this.renderStyles(document.stylesPart.styles));\r\n        }\r\n\r\n        if (document.numberingPart) {\r\n            appendComment(styleContainer, \"docx document numbering styles\");\r\n            styleContainer.appendChild(this.renderNumbering(document.numberingPart.domNumberings, styleContainer));\r\n            //styleContainer.appendChild(this.renderNumbering2(document.numberingPart, styleContainer));\r\n        }\r\n\r\n        if(!options.ignoreFonts && document.fontTablePart)\r\n            this.renderFontTable(document.fontTablePart, styleContainer);\r\n\r\n        var sectionElements = this.renderSections(document.documentPart.body);\r\n\r\n        if (this.inWrapper) {\r\n            var wrapper = this.renderWrapper();\r\n            appentElements(wrapper, sectionElements);\r\n            bodyContainer.appendChild(wrapper);\r\n        }\r\n        else {\r\n            appentElements(bodyContainer, sectionElements);\r\n        }\r\n    }\r\n\r\n    renderFontTable(fontsPart: FontTablePart, styleContainer: HTMLElement) {\r\n        for(let f of fontsPart.fonts.filter(x => x.refId)) {\r\n            this.document.loadFont(f.refId, f.fontKey).then(fontData => {\r\n                var cssTest = `@font-face {\r\n                    font-family: \"${f.name}\";\r\n                    src: url(${fontData});\r\n                }`;\r\n\r\n                appendComment(styleContainer, `Font ${f.name}`);\r\n                styleContainer.appendChild(createStyleElement(cssTest));\r\n            });\r\n        }\r\n    }\r\n\r\n    processClassName(className: string) {\r\n        if (!className)\r\n            return this.className;\r\n\r\n        return `${this.className}_${className}`;\r\n    }\r\n\r\n    processStyles(styles: IDomStyle[]) {\r\n        var stylesMap: Record<string, IDomStyle> = {};\r\n\r\n        for (let style of styles.filter(x => x.id != null)) {\r\n            stylesMap[style.id] = style;\r\n        }\r\n\r\n        for (let style of styles.filter(x => x.basedOn)) {\r\n            var baseStyle = stylesMap[style.basedOn];\r\n\r\n            if (baseStyle) {\r\n                for (let styleValues of style.styles) {\r\n                    var baseValues = baseStyle.styles.filter(x => x.target == styleValues.target);\r\n\r\n                    if (baseValues && baseValues.length > 0)\r\n                        this.copyStyleProperties(baseValues[0].values, styleValues.values);\r\n                }\r\n            }\r\n            else if (this.options.debug)\r\n                console.warn(`Can't find base style ${style.basedOn}`);\r\n        }\r\n\r\n        for (let style of styles) {\r\n            style.cssName = this.processClassName(this.escapeClassName(style.id));\r\n        }\r\n\r\n        return stylesMap;\r\n    }\r\n\r\n    processElement(element: OpenXmlElement) {\r\n        if (element.children) {\r\n            for (var e of element.children) {\r\n                e.className = this.processClassName(e.className);\r\n                e.parent = element;\r\n\r\n                if (e.type == DomType.Table) {\r\n                    this.processTable(e);\r\n                }\r\n                else {\r\n                    this.processElement(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processTable(table: IDomTable) {\r\n        for (var r of table.children) {\r\n            for (var c of r.children) {\r\n                c.cssStyle = this.copyStyleProperties(table.cellStyle, c.cssStyle, [\r\n                    \"border-left\", \"border-right\", \"border-top\", \"border-bottom\",\r\n                    \"padding-left\", \"padding-right\", \"padding-top\", \"padding-bottom\"\r\n                ]);\r\n\r\n                this.processElement(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    copyStyleProperties(input: Record<string, string>, output: Record<string, string>, attrs: string[] = null): Record<string, string> {\r\n        if (!input)\r\n            return output;\r\n\r\n        if (output == null) output = {};\r\n        if (attrs == null) attrs = Object.getOwnPropertyNames(input);\r\n\r\n        for (var key of attrs) {\r\n            if (input.hasOwnProperty(key) && !output.hasOwnProperty(key))\r\n                output[key] = input[key];\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    createSection(className: string, props: SectionProperties) {\r\n        var elem = this.htmlDocument.createElement(\"section\");\r\n        \r\n        elem.className = className;\r\n\r\n        if (props) {\r\n            if (props.pageMargins) {\r\n                elem.style.paddingLeft = this.renderLength(props.pageMargins.left);\r\n                elem.style.paddingRight = this.renderLength(props.pageMargins.right);\r\n                elem.style.paddingTop = this.renderLength(props.pageMargins.top);\r\n                elem.style.paddingBottom = this.renderLength(props.pageMargins.bottom);\r\n            }\r\n\r\n            if (props.pageSize) {\r\n                if (!this.options.ignoreWidth)\r\n                    elem.style.width = this.renderLength(props.pageSize.width);\r\n                if (!this.options.ignoreHeight)\r\n                    elem.style.minHeight = this.renderLength(props.pageSize.height);\r\n            }\r\n\r\n            if (props.columns && props.columns.numberOfColumns) {\r\n                elem.style.columnCount = `${props.columns.numberOfColumns}`;\r\n                elem.style.columnGap = this.renderLength(props.columns.space);\r\n\r\n                if (props.columns.separator) {\r\n                    elem.style.columnRule = \"1px solid black\";\r\n                }\r\n            }\r\n        }\r\n\r\n        return elem;\r\n    }\r\n\r\n    renderSections(document: DocumentElement): HTMLElement[] {\r\n        var result = [];\r\n\r\n        this.processElement(document);\r\n\r\n        for(let section of this.splitBySection(document.children)) {\r\n            var sectionElement = this.createSection(this.className, section.sectProps || document.props);\r\n            this.renderElements(section.elements, document, sectionElement);\r\n            result.push(sectionElement);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    splitBySection(elements: OpenXmlElement[]): { sectProps: SectionProperties, elements: OpenXmlElement[] }[] {\r\n        var current = { sectProps: null, elements: [] };\r\n        var result = [current];\r\n        var styles = this.document.stylesPart?.styles;\r\n        var styleMap = styles ? keyBy(styles, x => x.id) : null;\r\n\r\n        for(let elem of elements) {\r\n            if(elem.type == DomType.Paragraph) {\r\n                const styleName = (elem as ParagraphElement).styleName;\r\n                const s = styleMap && styleName ? styleMap[styleName] : null;\r\n            \r\n                if(s?.paragraphProps?.pageBreakBefore) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n            }\r\n\r\n            current.elements.push(elem);\r\n\r\n            if(elem.type == DomType.Paragraph)\r\n            {\r\n                const p = elem as ParagraphElement;\r\n\r\n                var sectProps = p.sectionProps;\r\n                var pBreakIndex = -1;\r\n                var rBreakIndex = -1;\r\n                \r\n                if(this.options.breakPages && p.children) {\r\n                    pBreakIndex = p.children.findIndex(r => {\r\n                        rBreakIndex = r.children?.findIndex(t => (t as BreakElement).break == \"page\") ?? -1;\r\n                        return rBreakIndex != -1;\r\n                    });\r\n                }\r\n    \r\n                if(sectProps || pBreakIndex != -1) {\r\n                    current.sectProps = sectProps;\r\n                    current = { sectProps: null, elements: [] };\r\n                    result.push(current);\r\n                }\r\n\r\n                if(pBreakIndex != -1) {\r\n                    let breakRun = p.children[pBreakIndex];\r\n                    let splitRun = rBreakIndex < breakRun.children.length - 1;\r\n\r\n                    if(pBreakIndex < p.children.length - 1 || splitRun) {\r\n                        var children = elem.children;\r\n                        var newParagraph = { ...elem, children: children.slice(pBreakIndex) };\r\n                        elem.children = children.slice(0, pBreakIndex);\r\n                        current.elements.push(newParagraph);\r\n\r\n                        if(splitRun) {\r\n                            let runChildren = breakRun.children;\r\n                            let newRun =  { ...breakRun, children: runChildren.slice(0, rBreakIndex) };\r\n                            elem.children.push(newRun);\r\n                            breakRun.children = runChildren.slice(rBreakIndex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let currentSectProps = null;\r\n\r\n        for (let i = result.length - 1; i >= 0; i--) {\r\n            if (result[i].sectProps == null) {\r\n                result[i].sectProps = currentSectProps;\r\n            } else {\r\n                currentSectProps = result[i].sectProps\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderLength(l: Length): string {\r\n        return l ? `${l.value}${l.type}` : null;\r\n    }\r\n\r\n    renderWrapper() {\r\n        var wrapper = document.createElement(\"div\");\r\n\r\n        wrapper.className = `${this.className}-wrapper`\r\n\r\n        return wrapper;\r\n    }\r\n\r\n    renderDefaultStyle() {\r\n        var styleText = `.${this.className}-wrapper { background: gray; padding: 30px; padding-bottom: 0px; display: flex; flex-flow: column; align-items: center; } \r\n                .${this.className}-wrapper section.${this.className} { background: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); margin-bottom: 30px; }\r\n                .${this.className} { color: black; }\r\n                section.${this.className} { box-sizing: border-box; }\r\n                .${this.className} table { border-collapse: collapse; }\r\n                .${this.className} table td, .${this.className} table th { vertical-align: top; }\r\n                .${this.className} p { margin: 0pt; }`;\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    // renderNumbering2(numberingPart: NumberingPartProperties, container: HTMLElement): HTMLElement {\r\n    //     let css = \"\";\r\n    //     const numberingMap = keyBy(numberingPart.abstractNumberings, x => x.id);\r\n    //     const bulletMap = keyBy(numberingPart.bulletPictures, x => x.id);\r\n    //     const topCounters = [];\r\n\r\n    //     for(let num of numberingPart.numberings) {\r\n    //         const absNum = numberingMap[num.abstractId];\r\n\r\n    //         for(let lvl of absNum.levels) {\r\n    //             const className = this.numberingClass(num.id, lvl.level);\r\n    //             let listStyleType = \"none\";\r\n\r\n    //             if(lvl.text && lvl.format == 'decimal') {\r\n    //                 const counter = this.numberingCounter(num.id, lvl.level);\r\n\r\n    //                 if (lvl.level > 0) {\r\n    //                     css += this.styleToString(`p.${this.numberingClass(num.id, lvl.level - 1)}`, {\r\n    //                         \"counter-reset\": counter\r\n    //                     });\r\n    //                 } else {\r\n    //                     topCounters.push(counter);\r\n    //                 }\r\n                    \r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": this.levelTextToContent(lvl.text, num.id),\r\n    //                     \"counter-increment\": counter\r\n    //                 });\r\n    //             } else if(lvl.bulletPictureId) {\r\n    //                 let pict = bulletMap[lvl.bulletPictureId];\r\n    //                 let variable = `--${this.className}-${pict.referenceId}`.toLowerCase();\r\n\r\n    //                 css += this.styleToString(`p.${className}:before`, {\r\n    //                     \"content\": \"' '\",\r\n    //                     \"display\": \"inline-block\",\r\n    //                     \"background\": `var(${variable})`\r\n    //                 }, pict.style);\r\n    \r\n    //                 this.document.loadNumberingImage(pict.referenceId).then(data => {\r\n    //                     var text = `.${this.className}-wrapper { ${variable}: url(${data}) }`;\r\n    //                     container.appendChild(createStyleElement(text));\r\n    //                 });\r\n    //             } else {\r\n    //                 listStyleType = this.numFormatToCssValue(lvl.format);\r\n    //             }\r\n\r\n    //             css += this.styleToString(`p.${className}`, {\r\n    //                 \"display\": \"list-item\",\r\n    //                 \"list-style-position\": \"inside\",\r\n    //                 \"list-style-type\": listStyleType,\r\n    //                 //TODO\r\n    //                 //...num.style\r\n    //             });\r\n    //         }\r\n    //     }\r\n\r\n    //     if (topCounters.length > 0) {\r\n    //         css += this.styleToString(`.${this.className}-wrapper`, {\r\n    //             \"counter-reset\": topCounters.join(\" \")\r\n    //         });\r\n    //     }\r\n\r\n    //     return createStyleElement(css);\r\n    // }\r\n\r\n    renderNumbering(styles: IDomNumbering[], styleContainer: HTMLElement) {\r\n        var styleText = \"\";\r\n        var rootCounters = [];\r\n\r\n        for (var num of styles) {\r\n            var selector = `p.${this.numberingClass(num.id, num.level)}`;\r\n            var listStyleType = \"none\";\r\n\r\n            if (num.levelText && num.format == \"decimal\") {\r\n                let counter = this.numberingCounter(num.id, num.level);\r\n\r\n                if (num.level > 0) {\r\n                    styleText += this.styleToString(`p.${this.numberingClass(num.id, num.level - 1)}`, {\r\n                        \"counter-reset\": counter\r\n                    });\r\n                }\r\n                else {\r\n                    rootCounters.push(counter);\r\n                }\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": this.levelTextToContent(num.levelText, num.id),\r\n                    \"counter-increment\": counter\r\n                });\r\n            }\r\n            else if (num.bullet) {\r\n                let valiable = `--${this.className}-${num.bullet.src}`.toLowerCase();\r\n\r\n                styleText += this.styleToString(`${selector}:before`, {\r\n                    \"content\": \"' '\",\r\n                    \"display\": \"inline-block\",\r\n                    \"background\": `var(${valiable})`\r\n                }, num.bullet.style);\r\n\r\n                this.document.loadNumberingImage(num.bullet.src).then(data => {\r\n                    var text = `.${this.className}-wrapper { ${valiable}: url(${data}) }`;\r\n                    styleContainer.appendChild(createStyleElement(text));\r\n                });\r\n            }\r\n            else {\r\n                listStyleType = this.numFormatToCssValue(num.format);\r\n            }\r\n\r\n            styleText += this.styleToString(selector, {\r\n                \"display\": \"list-item\",\r\n                \"list-style-position\": \"inside\",\r\n                \"list-style-type\": listStyleType,\r\n                ...num.style\r\n            });\r\n        }\r\n\r\n        if (rootCounters.length > 0) {\r\n            styleText += this.styleToString(`.${this.className}-wrapper`, {\r\n                \"counter-reset\": rootCounters.join(\" \")\r\n            });\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderStyles(styles: IDomStyle[]): HTMLElement {\r\n        var styleText = \"\";\r\n        var stylesMap = this.processStyles(styles);\r\n\r\n        for (let style of styles) {\r\n            var subStyles =  style.styles;\r\n\r\n            if(style.linked) {\r\n                var linkedStyle = style.linked && stylesMap[style.linked];\r\n\r\n                if (linkedStyle)\r\n                    subStyles = subStyles.concat(linkedStyle.styles);\r\n                else if(this.options.debug)\r\n                    console.warn(`Can't find linked style ${style.linked}`);\r\n            }\r\n\r\n            for (var subStyle of subStyles) {\r\n                var selector = \"\";\r\n\r\n                if (style.target == subStyle.target)\r\n                    selector += `${style.target}.${style.cssName}`;\r\n                else if (style.target)\r\n                    selector += `${style.target}.${style.cssName} ${subStyle.target}`;\r\n                else\r\n                    selector += `.${style.cssName} ${subStyle.target}`;\r\n\r\n                if (style.isDefault && style.target)\r\n                    selector = `.${this.className} ${style.target}, ` + selector;\r\n\r\n                styleText += this.styleToString(selector, subStyle.values);\r\n            }\r\n        }\r\n\r\n        return createStyleElement(styleText);\r\n    }\r\n\r\n    renderElement(elem: OpenXmlElement, parent: OpenXmlElement): Node {\r\n        switch (elem.type) {\r\n            case DomType.Paragraph:\r\n                return this.renderParagraph(<ParagraphElement>elem);\r\n\r\n            case DomType.BookmarkStart:\r\n                return this.renderBookmarkStart(<BookmarkStartElement>elem);\r\n\r\n            case DomType.BookmarkEnd:\r\n                return null;\r\n    \r\n            case DomType.Run:\r\n                return this.renderRun(<RunElement>elem);\r\n\r\n            case DomType.Table:\r\n                return this.renderTable(elem);\r\n\r\n            case DomType.Row:\r\n                return this.renderTableRow(elem);\r\n\r\n            case DomType.Cell:\r\n                return this.renderTableCell(elem);\r\n\r\n            case DomType.Hyperlink:\r\n                return this.renderHyperlink(elem);\r\n\r\n            case DomType.Drawing:\r\n                return this.renderDrawing(<IDomImage>elem);\r\n\r\n            case DomType.Image:\r\n                return this.renderImage(<IDomImage>elem);\r\n            \r\n            case DomType.Text:\r\n                return this.renderText(<TextElement>elem);\r\n\r\n            case DomType.Tab:\r\n                return this.renderTab(elem);\r\n            \r\n            case DomType.Symbol:\r\n                return this.renderSymbol(<SymbolElement>elem);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderChildren(elem: OpenXmlElement, into?: HTMLElement): Node[] {\r\n        return this.renderElements(elem.children, elem, into);\r\n    }\r\n\r\n    renderElements(elems: OpenXmlElement[], parent: OpenXmlElement, into?: HTMLElement): Node[] {\r\n        if(elems == null)\r\n            return null;\r\n\r\n        var result = elems.map(e => this.renderElement(e, parent)).filter(e => e != null);\r\n\r\n        if(into)\r\n            for(let c of result)\r\n                into.appendChild(c);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderParagraph(elem: ParagraphElement) {\r\n        var result = this.htmlDocument.createElement(\"p\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        this.renderCommonProeprties(result.style, elem);\r\n\r\n        if (elem.numbering) {\r\n            var numberingClass = this.numberingClass(elem.numbering.id, elem.numbering.level);\r\n            result.className = appendClass(result.className, numberingClass);\r\n        }\r\n\r\n        if (elem.styleName) {\r\n            var styleClassName = this.processClassName(this.escapeClassName(elem.styleName));\r\n            result.className = appendClass(result.className, styleClassName);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderRunProperties(style: any, props: RunProperties) {\r\n        this.renderCommonProeprties(style, props);\r\n    }\r\n\r\n    renderCommonProeprties(style: any, props: CommonProperties){\r\n        if(props == null)\r\n            return;\r\n\r\n        if(props.color) {\r\n            style[\"color\"] = props.color;\r\n        }\r\n\r\n        if (props.fontSize) {\r\n            style[\"font-size\"] = this.renderLength(props.fontSize);\r\n        }\r\n    }\r\n\r\n    renderHyperlink(elem: IDomHyperlink) {\r\n        var result = this.htmlDocument.createElement(\"a\");\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.href)\r\n            result.href = elem.href\r\n\r\n        return result;\r\n    }\r\n\r\n    renderDrawing(elem: IDomImage) {\r\n        var result = this.htmlDocument.createElement(\"div\");\r\n\r\n        result.style.display = \"inline-block\";\r\n        result.style.position = \"relative\";\r\n        result.style.textIndent = \"0px\";\r\n\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderImage(elem: IDomImage) {\r\n        let result = this.htmlDocument.createElement(\"img\");\r\n\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (this.document) {\r\n            this.document.loadDocumentImage(elem.src).then(x => {\r\n                result.src = x;\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderText(elem: TextElement) {\r\n        return this.htmlDocument.createTextNode(elem.text);\r\n    }\r\n\r\n    renderSymbol(elem: SymbolElement) {\r\n        var span = this.htmlDocument.createElement(\"span\");\r\n        span.style.fontFamily = elem.font;\r\n        span.innerHTML = `&#x${elem.char};`\r\n        return span;\r\n    }\r\n\r\n    renderTab(elem: OpenXmlElement) {\r\n        var tabSpan = this.htmlDocument.createElement(\"span\");\r\n     \r\n        tabSpan.innerHTML = \"&emsp;\";//\"&nbsp;\";\r\n\r\n        if(this.options.experimental) {\r\n            setTimeout(() => {\r\n                var paragraph = findParent<ParagraphElement>(elem, DomType.Paragraph);\r\n                \r\n                if(paragraph.tabs == null)\r\n                    return;\r\n\r\n                paragraph.tabs.sort((a, b) => a.position.value - b.position.value);\r\n                tabSpan.style.display = \"inline-block\";\r\n                updateTabStop(tabSpan, paragraph.tabs);\r\n            }, 0);\r\n        }\r\n\r\n        return tabSpan;\r\n    }\r\n\r\n    renderBookmarkStart(elem: BookmarkStartElement): HTMLElement {\r\n        var result = this.htmlDocument.createElement(\"span\");\r\n        result.id = elem.name;\r\n        return result;\r\n    }\r\n\r\n    renderRun(elem: RunElement) {\r\n        if (elem.break)\r\n            return elem.break == \"page\" ? null : this.htmlDocument.createElement(\"br\");\r\n        \r\n        if (elem.fldCharType || elem.instrText)\r\n            return null;\r\n\r\n        var result = this.htmlDocument.createElement(\"span\");\r\n\r\n        if(elem.id)\r\n            result.id = elem.id;\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.href) {\r\n            var link = this.htmlDocument.createElement(\"a\");\r\n\r\n            link.href = elem.href;\r\n            link.appendChild(result);\r\n\r\n            return link;\r\n        }\r\n        else if (elem.wrapper) {\r\n            var wrapper = this.htmlDocument.createElement(elem.wrapper);\r\n            wrapper.appendChild(result);\r\n            return wrapper;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTable(elem: IDomTable) {\r\n        let result = this.htmlDocument.createElement(\"table\");\r\n\r\n        if (elem.columns)\r\n            result.appendChild(this.renderTableColumns(elem.columns));\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableColumns(columns: IDomTableColumn[]) {\r\n        let result = this.htmlDocument.createElement(\"colGroup\");\r\n\r\n        for (let col of columns) {\r\n            let colElem = this.htmlDocument.createElement(\"col\");\r\n\r\n            if (col.width)\r\n                colElem.style.width = `${col.width}px`;\r\n\r\n            result.appendChild(colElem);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableRow(elem: OpenXmlElement) {\r\n        let result = this.htmlDocument.createElement(\"tr\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    renderTableCell(elem: IDomTableCell) {\r\n        let result = this.htmlDocument.createElement(\"td\");\r\n\r\n        this.renderClass(elem, result);\r\n        this.renderChildren(elem, result);\r\n        this.renderStyleValues(elem.cssStyle, result);\r\n\r\n        if (elem.span) result.colSpan = elem.span;\r\n\r\n        return result;\r\n    }\r\n\r\n    renderStyleValues(style: Record<string, string>, ouput: HTMLElement) {\r\n        if (style == null)\r\n            return;\r\n\r\n        for (let key in style) {\r\n            if (style.hasOwnProperty(key)) {\r\n                ouput.style[key] = style[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    renderClass(input: OpenXmlElement, ouput: HTMLElement) {\r\n        if (input.className)\r\n            ouput.className = input.className;\r\n    }\r\n\r\n    numberingClass(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    styleToString(selectors: string, values: Record<string, string>, cssText: string = null) {\r\n        let result = selectors + \" {\\r\\n\";\r\n\r\n        for (const key in values) {\r\n            result += `  ${key}: ${values[key]};\\r\\n`;\r\n        }\r\n\r\n        if (cssText)\r\n            result += \";\" + cssText;\r\n\r\n        return result + \"}\\r\\n\";\r\n    }\r\n\r\n    numberingCounter(id: string, lvl: number) {\r\n        return `${this.className}-num-${id}-${lvl}`;\r\n    }\r\n\r\n    levelTextToContent(text: string, id: string) {\r\n        var result = text.replace(/%\\d*/g, s => {\r\n            let lvl = parseInt(s.substring(1), 10) - 1;\r\n            return `\"counter(${this.numberingCounter(id, lvl)})\"`;\r\n        });\r\n\r\n        return '\"' + result + '\"';\r\n    }\r\n\r\n    numFormatToCssValue(format: string) {\r\n        var mapping = {\r\n            \"none\": \"none\",\r\n            \"bullet\": \"disc\",\r\n            \"decimal\": \"decimal\",\r\n            \"lowerLetter\": \"lower-alpha\",\r\n            \"upperLetter\": \"upper-alpha\",\r\n            \"lowerRoman\": \"lower-roman\",\r\n            \"upperRoman\": \"upper-roman\",\r\n        };\r\n\r\n        return mapping[format] || format;\r\n    }\r\n\r\n    escapeClassName(className: string) {\r\n        return className?.replace(/[ .]+/g, '-').replace(/[&]+/g, 'and');\r\n    }\r\n}\r\n\r\nfunction appentElements(container: HTMLElement, children: HTMLElement[]) {\r\n    for (let c of children)\r\n        container.appendChild(c);\r\n}\r\n\r\nfunction removeAllElements(elem: HTMLElement) {\r\n    while (elem.firstChild) {\r\n        elem.removeChild(elem.firstChild);\r\n    }\r\n}\r\n\r\nfunction createStyleElement(cssText: string) {\r\n    var styleElement = document.createElement(\"style\");\r\n    styleElement.innerHTML = cssText;\r\n    return styleElement;\r\n}\r\n\r\nfunction appendComment(elem: HTMLElement, comment: string) {\r\n    elem.appendChild(document.createComment(comment));\r\n}\r\n\r\nfunction findParent<T extends OpenXmlElement>(elem: OpenXmlElement, type: DomType): T {\r\n    var parent = elem.parent;\r\n\r\n    while (parent != null && parent.type != type)\r\n        parent = parent.parent;\r\n    \r\n    return <T>parent;\r\n}","import { ParagraphTab } from \"./dom/paragraph\";\r\n\r\nexport function updateTabStop(elem: HTMLElement, tabs: ParagraphTab[], pixelToPoint: number = 72 / 96) {\r\n\r\n    let p = elem.closest(\"p\");\r\n\r\n    let tbb = elem.getBoundingClientRect();\r\n    let pbb = p.getBoundingClientRect();\r\n\r\n    let left = (tbb.left - pbb.left) * pixelToPoint;\r\n    let tab = tabs.find(t => t.style != \"clear\" && t.position.value > left);\r\n\r\n    if(tab == null)\r\n        return;\r\n\r\n    elem.style.display = \"inline-block\";\r\n    elem.style.width = `${(tab.position.value - left)}pt`;    \r\n\r\n    switch (tab.leader) {\r\n        case \"dot\":\r\n        case \"middleDot\":\r\n            elem.style.borderBottom = \"1px black dotted\";\r\n            break;\r\n\r\n        case \"hyphen\":\r\n        case \"heavy\":\r\n        case \"underscore\":\r\n            elem.style.borderBottom = \"1px black solid\";\r\n            break;\r\n    }\r\n}"],"sourceRoot":""}